// TEENSY SYNTH 1.01
// -Brian Peters
// www.brianpeters.net
//
// - This is the single file version of the program for ease of copy/pasting.
// - Please see the schematic, feature list, channel/CC guide, and video
//		for more information.
//
//
//
//
//	- MATERIALS
//
// 		- 1x Teensy 3.1 Board
//			(www.pjrc.com)
//		- 5x 15k Resistors
//		- 1x 75k Resistor
//		- 1x 10uF Electrolytic Capacitor
//		- 1x 1/4" Audio Jack (or 3.5mm)
//		- 1x Small Breadboard
//		- 1x USB A to Micro B Cable
//		- 1x Line Matching Transfomer for output
//		- Some Wire
//
//
//	- UPLOADING PROGRAM TO TEENSY (Ideally before wiring everything.)
// 	- After installing the teensy loader, go to
//			Tools > Board > Teensy 3.1
//				and
//			Tools > USB Type > MIDI
//		- Copy/Paste this program into the Arduino IDE
//		- Upload
//
//
//	- CONNECTION LIST
//
//		- Teensy GND
//			- Breadboard GND Bus
//				- 75k Resistor Leg 1
//				- Audio Jack Sleeve
//		- Teensy B0
//			- 15k Resistor #1 Leg 1
//		- Teensy B1
//			- 15k Resistor #2 Leg 1
//		- Teensy B2
//			- 15k Resistor #3 Leg 1
//		- Teensy B3
//			- 15k Resistor #4 Leg 1
//		- Teensy E1
//			- 15k Resistor #5 Leg 1
//		- 10uF Electrolytic Capacitor Positive Leg
//			- 15k Resistor #1 Leg 2
//			- 15k Resistor #2 Leg 2
//			- 15k Resistor #3 Leg 2
//			- 15k Resistor #4 Leg 2
//			- 15k Resistor #5 Leg 2
//		- 75k Resistor Leg 2
//			- 10uF Electrolytic Capacitor Negative Leg
//			- Audio Jack Tip
//
//
//
// PROGRAM STRUCTURE:
//
// 	Global Variables
//		PCM Sample Data
//  	PCM Lengths
//
// setup
// loop
//
//
// MISC FUNCTIONS:
//
// 	ledFlash
//
//
// MIDI CALLBACK FUNCTIONS:
//
//		OnNoteOn
//		OnNoteOff
//		OnControlChange
//		OnPitchChange
//
//
// OSCILLATOR FUNCTIONS:
//
//		ch1_Oscillator
//		ch2_Oscillator
//		ch3_Oscillator
//		ch4_Oscillator
//		mainSampleEngine
//		mainWaveformEngine
//		
//
// AUXILIARY FUNCTIONS:
//
//		calculateInsidePitchInMicrosAfterBendFactorCh2
//		testArrayContentsForNoNotes
//		testArrayContentsForTwoNotesOrMore
//		testArrayContentsForThreeNotesOrMore
//		findSingleNoteInArray
//		isThisNoteInArray
//		placeNoteInFirstEmptyArpArrayPosition
//		eraseThisNoteInArpArray
//		lowestNoteInArpArray
//
//
// ARPEGGIATOR FUNCTIONS:
//
//		ch1_Arpeggiator
//		ch2_Arpeggiator
// 	ch3_Arpeggiator
//		ch4_Arpeggiator
//		waveform_Arpeggiator
//
//
//
//
// The usbMIDI.read() in the main loop can trigger all of the MIDI callback
// functions, which update static variables in the oscillator and arpeggiator
// functions.
//
// All of the functions in the main loop have a 1 as their first argument,
// which allows them to update their portamento/arpeggiation/decay/sample.






//////////////////////////////////////////
//  GLOBAL VARIABLES
//////////////////////////////////////////

// Pin Out Constants
const unsigned int ledPin = 13;
const unsigned int audioFour = 20;
const unsigned int audioThree = 10;
const unsigned int audioTwo = 9;
const unsigned int audioOne = 6;

// User Settings Variables
int tuningPitch = 440;
unsigned int bendRange = 12; // Default Bend Range

// Vibrato User Settings
const float vibRateFactor = 1.0; // Vibrato rate factor.  Increase to increase vibrato speed.
static float vibDepth = 0.0004;  // Vibrato depth.  Usually 0.0004  (1 is an octave width)





//////////////////////////////////////////
//  PCM AUDIO DATA
//////////////////////////////////////////

// 8ks/s, 8 Bit Audio
PROGMEM prog_uchar sampleData[10679] = {
  0, 0, 0, 0, 52, 34, 64, 46, 81, 37, 0, 0, 52, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 200, 200, 212, 238, 232, 238, 255, 255, 255, 250, 255, 255, 180, 192, 186, 162, 162, 168, 212, 218, 209, 203, 194, 186, 206, 218, 206, 209, 203, 168, 168, 165, 142, 87, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 58, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 37, 20, 32, 11, 17, 0, 0, 0, 0, 0, 0, 5, 34, 49, 84, 0, 0, 0, 0, 8, 34, 49, 81, 90, 157, 200, 241, 189, 98, 136, 122, 142, 142, 154, 162, 171, 183, 244, 255, 255, 255, 255, 255, 255, 255, 241, 160, 119, 119, 113, 130, 101, 157, 177, 174, 122, 93, 75, 139, 253, 212, 255, 255, 255, 255, 145, 151, 142, 139, 145, 165, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 232, 212, 206, 200, 200, 197, 200, 171, 148, 142, 122, 189, 183, 171, 122, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 26, 43, 66, 122, 148, 162, 171, 154, 177, 189, 244, 255, 255, 255, 247, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 253, 250, 235, 224, 221, 206, 206, 192, 180, 177, 168, 162, 148, 145, 130, 119, 107, 87, 75, 58, 37, 20, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 17, 26, 40, 46, 61, 66, 93, 119, 130, 136, 151, 116, 104, 122, 128, 145, 177, 197, 200, 215, 209, 203, 218, 232, 238, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 250, 238, 229, 224, 203, 142, 130, 122, 107, 116, 130, 122, 113, 104, 101, 90, 81, 78, 69, 66, 58, 52, 49, 43, 69, 64, 58, 61, 49, 52, 49, 43, 46, 29, 14, 14, 17, 20, 23, 23, 34, 32, 40, 72, 75, 81, 87, 101, 96, 107, 116, 122, 125, 136, 148, 151, 162, 171, 180, 183, 200, 209, 212, 224, 232, 241, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 250, 235, 226, 212, 203, 192, 177, 174, 168, 171, 162, 157, 139, 142, 125, 104, 96, 93, 87, 87, 72, 78, 69, 64, 58, 49, 40, 32, 23, 14, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 20, 32, 43, 58, 66, 81, 90, 101, 113, 125, 139, 145, 160, 165, 180, 186, 200, 206, 215, 224, 232, 238, 253, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 247, 241, 241, 229, 226, 226, 221, 212, 209, 203, 200, 192, 189, 180, 177, 171, 165, 160, 154, 145, 145, 139, 130, 128, 122, 116, 110, 107, 101, 96, 90, 87, 84, 81, 75, 75, 69, 69, 64, 61, 66, 61, 61, 58, 58, 58, 58, 64, 58, 61, 64, 64, 72, 69, 75, 78, 75, 84, 90, 93, 101, 98, 110, 113, 119, 125, 130, 139, 145, 148, 157, 165, 171, 180, 183, 194, 212, 215, 224, 226, 235, 235, 250, 250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 250, 244, 238, 232, 226, 218, 212, 206, 192, 192, 180, 174, 165, 160, 148, 142, 130, 128, 116, 107, 98, 90, 81, 64, 66, 52, 40, 40, 26, 20, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 14, 20, 26, 32, 43, 46, 55, 66, 72, 81, 87, 96, 101, 110, 119, 128, 130, 142, 145, 160, 160, 171, 171, 183, 186, 194, 200, 203, 209, 218, 221, 221, 229, 229, 235, 238, 241, 244, 244, 250, 253, 253, 253, 253, 253, 255, 253, 255, 253, 253, 253, 253, 247, 247, 244, 241, 241, 235, 232, 229, 224, 224, 215, 215, 209, 206, 200, 194, 186, 186, 180, 174, 165, 162, 157, 148, 145, 142, 136, 128, 122, 119, 113, 101, 107, 93, 96, 87, 81, 81, 72, 72, 69, 64, 64, 58, 52, 55, 49, 46, 46, 43, 43, 40, 34, 40, 34, 40, 34, 34, 37, 37, 34, 34, 40, 37, 40, 43, 43, 46, 43, 52, 52, 58, 58, 58, 64, 66, 75, 75, 78, 81, 87, 93, 98, 96, 107, 107, 116, 119, 125, 133, 133, 139, 145, 145, 160, 157, 165, 168, 174, 177, 189, 183, 194, 197, 203, 200, 206, 215, 218, 215, 224, 224, 229, 229, 235, 232, 232, 238, 241, 241, 244, 241, 244, 238, 247, 244, 241, 244, 241, 241, 241, 241, 238, 238, 229, 238, 229, 224, 226, 224, 218, 215, 218, 209, 206, 203, 197, 194, 192, 186, 180, 177, 174, 168, 165, 157, 154, 148, 142, 142, 133, 128, 125, 122, 113, 110, 104, 98, 98, 90, 87, 81, 81, 72, 69, 66, 64, 52, 58, 55, 46, 46, 40, 43, 40, 37, 32, 32, 29, 34, 26, 26, 29, 26, 26, 26, 26, 26, 26, 23, 29, 26, 29, 32, 29, 32, 37, 37, 34, 40, 46, 40, 52, 46, 52, 58, 58, 64, 61, 72, 75, 75, 78, 81, 93, 87, 93, 101, 101, 107, 113, 113, 122, 119, 130, 130, 133, 142, 139, 148, 148, 157, 157, 160, 165, 168, 165, 177, 174, 180, 180, 183, 189, 189, 189, 194, 194, 194, 197, 194, 197, 203, 200, 197, 203, 203, 197, 206, 200, 200, 206, 200, 197, 200, 194, 203, 194, 194, 194, 192, 189, 189, 189, 183, 183, 180, 177, 177, 171, 171, 165, 165, 165, 157, 154, 151, 151, 145, 142, 136, 142, 130, 130, 122, 122, 119, 113, 113, 110, 107, 98, 101, 98, 90, 90, 87, 84, 84, 75, 78, 75, 69, 72, 69, 64, 66, 61, 61, 61, 61, 58, 58, 55, 55, 55, 55, 58, 52, 52, 58, 52, 58, 55, 58, 55, 58, 58, 61, 58, 64, 61, 66, 66, 69, 69, 72, 72, 75, 78, 81, 81, 84, 87, 90, 96, 93, 96, 101, 101, 107, 107, 113, 113, 116, 119, 125, 128, 128, 130, 136, 136, 139, 142, 142, 154, 148, 154, 151, 162, 157, 165, 160, 165, 168, 171, 168, 174, 174, 177, 177, 177, 180, 177, 186, 177, 186, 180, 183, 186, 186, 183, 183, 180, 189, 183, 183, 183, 180, 183, 180, 180, 177, 180, 177, 174, 177, 171, 174, 171, 168, 168, 165, 162, 165, 160, 160, 157, 154, 151, 151, 151, 145, 145, 142, 139, 139, 136, 130, 130, 125, 130, 122, 122, 119, 116, 116, 113, 107, 107, 107, 101, 104, 101, 98, 93, 96, 90, 96, 87, 87, 87, 84, 90, 81, 81, 84, 81, 81, 81, 78, 75, 78, 78, 78, 78, 78, 78, 78, 78, 81, 78, 81, 78, 84, 78, 81, 81, 87, 87, 84, 87, 90, 90, 90, 93, 96, 96, 96, 96, 104, 98, 101, 107, 104, 110, 110, 110, 113, 119, 119, 116, 122, 128, 122, 130, 128, 130, 133, 130, 139, 139, 142, 139, 145, 148, 142, 151, 148, 154, 154, 154, 154, 160, 160, 154, 162, 160, 162, 162, 162, 165, 168, 160, 168, 165, 168, 165, 168, 165, 168, 162, 168, 168, 165, 168, 162, 165, 162, 168, 165, 162, 160, 162, 162, 162, 157, 160, 157, 160, 157, 154, 154, 154, 151, 154, 145, 151, 142, 148, 145, 142, 142, 142, 136, 139, 133, 133, 133, 133, 130, 128, 125, 125, 125, 125, 122, 119, 119, 116, 113, 113, 113, 119, 104, 113, 107, 110, 104, 101, 104, 104, 101, 101, 101, 101, 98, 98, 98, 96, 98, 101, 93, 101, 93, 96, 98, 96, 96, 96, 93, 98, 98, 98, 96, 98, 96, 98, 101, 98, 101, 98, 101, 101, 101, 101, 107, 104, 104, 107, 107, 110, 110, 107, 113, 113, 113, 113, 119, 116, 119, 119, 122, 122, 122, 122, 159, 236, 159, 196, 165, 157, 180, 255, 141, 194, 210, 144, 173, 108, 212, 219, 147, 125, 129, 182, 107, 208, 192, 175, 219, 124, 154, 148, 92, 107, 111, 115, 135, 78, 108, 135, 116, 100, 97, 97, 96, 139, 144, 67, 124, 114, 137, 128, 104, 80, 122, 76, 107, 99, 63, 46, 66, 81, 83, 128, 60, 90, 128, 40, 60, 72, 66, 72, 108, 65, 87, 73, 73, 104, 73, 79, 81, 107, 105, 73, 124, 103, 80, 73, 78, 94, 96, 100, 77, 74, 82, 83, 66, 88, 109, 106, 97, 107, 110, 99, 97, 78, 85, 103, 114, 94, 91, 116, 105, 107, 91, 95, 100, 117, 113, 102, 102, 104, 110, 180, 94, 165, 132, 114, 132, 133, 128, 121, 138, 131, 128, 118, 125, 124, 145, 139, 122, 114, 120, 118, 120, 119, 124, 122, 125, 125, 128, 154, 152, 112, 123, 58, 91, 116, 140, 119, 136, 123, 199, 147, 171, 81, 138, 143, 219, 142, 84, 56, 86, 104, 111, 42, 163, 90, 77, 143, 107, 121, 86, 189, 203, 147, 112, 156, 150, 220, 63, 133, 58, 149, 143, 187, 67, 199, 77, 51, 60, 77, 121, 118, 163, 97, 171, 128, 129, 58, 157, 105, 69, 79, 224, 104, 84, 147, 138, 142, 133, 35, 76, 184, 135, 149, 143, 213, 138, 142, 111, 171, 138, 128, 255, 255, 154, 86, 129, 175, 143, 102, 77, 67, 111, 60, 51, 25, 129, 136, 152, 72, 164, 128, 100, 177, 90, 114, 95, 109, 100, 111, 163, 129, 133, 86, 164, 145, 149, 147, 117, 141, 205, 197, 209, 186, 74, 83, 101, 26, 86, 77, 35, 83, 53, 0, 81, 96, 47, 14, 40, 107, 125, 96, 156, 181, 165, 235, 224, 253, 245, 251, 235, 184, 162, 62, 87, 90, 156, 69, 95, 128, 68, 10, 0, 93, 187, 215, 253, 168, 180, 123, 136, 113, 110, 154, 166, 141, 217, 186, 197, 250, 166, 205, 239, 255, 232, 255, 255, 255, 38, 72, 56, 74, 110, 13, 69, 41, 2, 80, 107, 61, 113, 17, 58, 41, 22, 5, 13, 0, 4, 0, 0, 0, 23, 223, 218, 171, 181, 180, 172, 138, 202, 209, 200, 113, 130, 192, 181, 229, 187, 193, 209, 218, 255, 248, 255, 253, 226, 255, 26, 69, 81, 86, 83, 26, 69, 117, 19, 31, 53, 66, 89, 108, 78, 23, 26, 26, 25, 16, 0, 44, 0, 46, 0, 119, 248, 181, 227, 168, 192, 193, 175, 128, 186, 177, 209, 212, 180, 205, 159, 130, 200, 184, 217, 199, 255, 227, 255, 229, 255, 108, 0, 25, 0, 31, 68, 81, 95, 93, 123, 114, 120, 123, 75, 98, 145, 139, 129, 83, 95, 55, 34, 22, 0, 28, 0, 4, 218, 215, 181, 177, 128, 101, 80, 92, 69, 75, 53, 78, 87, 77, 104, 114, 65, 93, 83, 111, 130, 174, 183, 196, 209, 239, 202, 59, 72, 119, 136, 181, 187, 200, 227, 241, 241, 227, 239, 232, 215, 200, 192, 178, 166, 189, 196, 171, 151, 130, 92, 80, 89, 41, 151, 196, 153, 133, 101, 99, 58, 53, 29, 13, 8, 10, 19, 11, 29, 34, 55, 65, 81, 98, 75, 75, 87, 101, 129, 151, 166, 181, 108, 86, 111, 129, 147, 174, 184, 223, 227, 245, 250, 251, 251, 244, 250, 239, 221, 217, 199, 180, 175, 145, 178, 174, 171, 147, 129, 98, 117, 175, 151, 147, 123, 110, 86, 71, 52, 35, 23, 14, 10, 2, 4, 8, 13, 22, 35, 41, 56, 75, 93, 108, 113, 81, 93, 107, 138, 117, 77, 101, 111, 128, 141, 156, 172, 193, 202, 218, 230, 239, 245, 250, 251, 250, 242, 238, 226, 217, 199, 192, 174, 160, 144, 135, 160, 166, 151, 156, 154, 133, 119, 107, 99, 89, 75, 59, 47, 37, 25, 13, 5, 0, 0, 0, 0, 0, 7, 17, 31, 41, 55, 66, 86, 98, 114, 117, 96, 83, 90, 111, 128, 142, 153, 162, 172, 180, 192, 200, 214, 224, 232, 244, 248, 255, 255, 255, 251, 247, 239, 229, 218, 203, 193, 178, 166, 147, 136, 119, 135, 159, 145, 135, 116, 104, 92, 78, 77, 71, 61, 52, 44, 32, 25, 14, 8, 5, 1, 2, 2, 7, 16, 22, 35, 44, 58, 71, 80, 99, 111, 122, 136, 133, 114, 114, 125, 141, 153, 162, 171, 177, 181, 186, 193, 200, 209, 220, 224, 229, 235, 239, 236, 236, 235, 227, 218, 209, 199, 189, 177, 163, 153, 139, 129, 116, 102, 107, 123, 129, 116, 104, 92, 87, 81, 75, 71, 68, 62, 55, 49, 41, 37, 29, 26, 26, 25, 25, 29, 35, 40, 52, 61, 69, 80, 95, 104, 116, 128, 135, 144, 159, 151, 129, 128, 136, 147, 156, 162, 165, 166, 172, 178, 181, 186, 192, 202, 205, 209, 217, 220, 218, 220, 214, 208, 205, 196, 184, 177, 166, 157, 145, 135, 123, 116, 107, 96, 89, 107, 123, 116, 111, 98, 95, 89, 87, 81, 81, 75, 72, 66, 61, 52, 50, 41, 41, 37, 38, 40, 44, 52, 55, 62, 75, 81, 92, 102, 114, 122, 136, 141, 151, 157, 168, 165, 141, 136, 142, 153, 156, 163, 163, 166, 168, 168, 174, 178, 184, 187, 193, 200, 202, 203, 203, 203, 200, 197, 189, 186, 175, 166, 159, 150, 138, 132, 120, 114, 102, 99, 87, 87, 78, 98, 111, 111, 107, 95, 95, 90, 92, 89, 90, 87, 86, 80, 72, 71, 65, 53, 49, 46, 50, 52, 55, 61, 69, 75, 86, 93, 104, 116, 125, 138, 145, 159, 165, 175, 180, 184, 189, 193, 193, 193, 192, 192, 186, 187, 180, 178, 171, 168, 160, 157, 151, 145, 141, 135, 132, 130, 119, 119, 116, 114, 110, 108, 108, 104, 102, 104, 102, 102, 102, 102, 107, 107, 107, 110, 111, 104, 99, 101, 101, 108, 110, 113, 116, 117, 119, 122, 125, 130, 133, 136, 141, 142, 150, 150, 153, 153, 154, 154, 153, 151, 147, 147, 144, 139, 139, 136, 133, 132, 128, 123, 122, 119, 117, 117, 116, 114, 113, 111, 111, 114, 108, 113, 111, 114, 111, 114, 114, 114, 116, 119, 117, 117, 122, 120, 122, 123, 125, 128, 128, 129, 130, 128, 132, 132, 130, 130, 133, 133, 130, 133, 133, 130, 133, 130, 133, 130, 130, 132, 130, 130, 130, 129, 129, 129, 129, 129, 128, 128, 129, 125, 128, 128, 125, 129, 123, 125, 123, 129, 123, 125, 128, 125, 123, 125, 129, 136, 136, 138, 135, 133, 132, 132, 132, 130, 132, 128, 128, 120, 120, 117, 117, 114, 113, 111, 111, 110, 111, 111, 113, 114, 114, 116, 119, 119, 122, 122, 130, 128, 130, 130, 133, 136, 133, 136, 136, 139, 136, 138, 138, 138, 136, 138, 135, 138, 135, 133, 135, 132, 133, 130, 130, 130, 130, 128, 129, 123, 128, 123, 123, 122, 123, 122, 122, 119, 123, 122, 120, 120, 122, 122, 120, 123, 120, 122, 123, 122, 122, 125, 122, 122, 128, 123, 125, 128, 123, 128, 128, 125, 128, 129, 128, 128, 129, 128, 128, 128, 129, 128, 130, 128, 128, 128, 130, 125, 128, 129, 125, 128, 128, 125, 129, 125, 120, 116, 117, 119, 119, 120, 119, 120, 122, 123, 122, 128, 129, 130, 130, 135, 135, 138, 138, 138, 138, 139, 139, 136, 139, 135, 135, 133, 132, 130, 130, 129, 123, 123, 122, 122, 119, 119, 119, 117, 116, 117, 117, 116, 119, 116, 119, 116, 119, 117, 119, 119, 120, 122, 120, 120, 122, 125, 123, 125, 128, 125, 129, 128, 129, 129, 129, 132, 129, 130, 128, 132, 130, 129, 130, 130, 130, 129, 130, 130, 129, 130, 128, 130, 128, 129, 129, 125, 131, 114, 122, 138, 124, 118, 148, 161, 122, 95, 131, 91, 152, 136, 107, 157, 138, 164, 143, 101, 189, 142, 148, 164, 107, 124, 158, 161, 112, 133, 79, 99, 199, 80, 96, 150, 57, 135, 126, 85, 136, 138, 113, 114, 50, 97, 126, 140, 109, 111, 108, 125, 154, 134, 150, 150, 143, 177, 163, 170, 124, 106, 124, 139, 134, 129, 103, 122, 93, 144, 141, 151, 165, 155, 130, 90, 113, 111, 108, 93, 139, 87, 107, 79, 140, 111, 147, 100, 59, 115, 135, 121, 152, 124, 92, 148, 142, 108, 170, 168, 136, 149, 131, 164, 147, 118, 170, 85, 93, 141, 117, 89, 115, 105, 75, 77, 108, 125, 111, 154, 124, 126, 158, 81, 103, 140, 114, 126, 133, 114, 138, 161, 119, 113, 147, 135, 155, 144, 158, 177, 150, 150, 123, 142, 93, 128, 104, 107, 95, 129, 104, 129, 113, 120, 147, 172, 157, 141, 132, 99, 65, 106, 55, 129, 195, 152, 181, 172, 178, 177, 182, 180, 180, 178, 180, 176, 180, 173, 175, 170, 171, 166, 165, 163, 161, 158, 156, 152, 150, 146, 146, 141, 140, 137, 134, 132, 131, 124, 126, 120, 121, 117, 115, 115, 119, 10, 32, 27, 18, 22, 17, 17, 17, 19, 20, 26, 29, 33, 37, 42, 45, 50, 53, 59, 61, 65, 69, 71, 75, 80, 84, 84, 89, 92, 95, 98, 103, 107, 112, 114, 120, 122, 130, 131, 138, 137, 145, 143, 155, 140, 182, 255, 216, 243, 239, 245, 246, 249, 248, 249, 249, 248, 244, 247, 241, 240, 237, 234, 231, 227, 223, 220, 214, 214, 208, 203, 199, 195, 191, 187, 184, 178, 174, 170, 166, 163, 158, 155, 152, 145, 143, 139, 138, 131, 132, 123, 125, 118, 119, 109, 128, 47, 38, 56, 31, 43, 31, 36, 29, 32, 31, 32, 32, 35, 34, 38, 38, 43, 43, 48, 48, 54, 55, 61, 61, 67, 68, 74, 75, 80, 83, 87, 89, 94, 95, 100, 103, 108, 108, 114, 114, 119, 121, 123, 125, 131, 131, 135, 135, 140, 137, 146, 142, 148, 144, 155, 141, 170, 219, 191, 209, 202, 209, 207, 209, 207, 207, 206, 206, 201, 202, 197, 196, 194, 191, 190, 186, 184, 178, 178, 173, 171, 168, 164, 162, 159, 156, 151, 149, 145, 143, 141, 136, 136, 131, 129, 125, 124, 121, 119, 115, 115, 111, 110, 108, 106, 104, 103, 99, 98, 97, 96, 94, 92, 92, 92, 88, 90, 87, 88, 84, 89, 83, 28, 52, 43, 41, 43, 40, 42, 42, 43, 44, 45, 48, 48, 53, 55, 56, 59, 61, 65, 67, 71, 73, 75, 81, 82, 85, 89, 91, 95, 97, 100, 105, 106, 109, 114, 114, 118, 120, 122, 124, 128, 130, 133, 135, 137, 138, 141, 143, 143, 146, 148, 148, 151, 151, 154, 152, 175, 173, 172, 178, 173, 187, 185, 187, 187, 188, 185, 190, 191, 189, 190, 189, 188, 188, 159, 165, 164, 156, 161, 149, 171, 183, 168, 177, 169, 173, 169, 151, 154, 155, 148, 149, 146, 147, 143, 144, 142, 141, 135, 150, 152, 146, 148, 147, 148, 121, 131, 125, 126, 120, 130, 139, 126, 134, 129, 133, 122, 124, 123, 122, 121, 122, 124, 121, 123, 120, 124, 111, 108, 113, 108, 110, 106, 114, 110, 112, 110, 111, 117, 117, 115, 119, 117, 93, 99, 103, 93, 105, 122, 116, 117, 123, 110, 95, 107, 103, 100, 111, 120, 112, 118, 119, 109, 107, 113, 108, 112, 108, 112, 109, 113, 112, 114, 114, 117, 115, 118, 124, 121, 124, 126, 117, 123, 122, 122, 131, 129, 130, 132, 130, 132, 132, 131, 137, 138, 137, 140, 137, 135, 137, 135, 141, 162, 149, 157, 154, 138, 143, 143, 139, 152, 149, 147, 146, 155, 159, 141, 142, 138, 143, 145, 142, 138, 133, 140, 145, 143, 135, 135, 150, 142, 142, 135, 143, 132, 132, 134, 141, 132, 129, 128, 144, 134, 131, 128, 131, 132, 139, 123, 129, 134, 134, 131, 129, 130, 123, 134, 132, 123, 118, 125, 123, 132, 125, 125, 118, 117, 121, 123, 118, 134, 118, 118, 132, 119, 114, 125, 128, 115, 112, 123, 121, 114, 115, 117, 115, 121, 120, 118, 121, 122, 126, 117, 120, 124, 125, 118, 125, 123, 123, 130, 131, 130, 123, 132, 126, 121, 119, 128, 126, 126, 122, 130, 128, 130, 123, 124, 131, 130, 132, 128, 124, 125, 130, 134, 132, 132, 121, 133, 133, 126, 121, 132, 134, 128, 126, 130, 126, 130, 123, 121, 130, 126, 124, 126, 129, 118, 125, 128, 128, 126, 125, 125, 132, 122, 131, 124, 124, 125, 128, 125, 131, 130, 125, 121, 126, 125, 122, 126, 124, 120, 129, 126, 125, 132, 126, 125, 130, 121, 124, 128, 121, 128, 125, 128, 126, 122, 128, 130, 124, 126, 123, 125, 129, 129, 130, 129, 128, 130, 130, 130, 131, 125, 130, 132, 126, 128, 130, 124, 131, 126, 125, 133, 124, 131, 129, 128, 130, 126, 126, 129, 128, 128, 128, 135, 131, 126, 130, 130, 131, 130, 128, 129, 132, 136, 128, 133, 132, 129, 134, 131, 131, 131, 131, 135, 126, 130, 131, 130, 132, 130, 128, 132, 134, 126, 131, 133, 125, 129, 131, 126, 129, 132, 128, 129, 129, 125, 129, 129, 126, 126, 128, 131, 129, 131, 131, 125, 131, 126, 125, 130, 126, 130, 128, 128, 126, 128, 126, 126, 129, 125, 126, 130, 129, 130, 125, 126, 128, 126, 126, 126, 126, 128, 126, 123, 128, 124, 123, 126, 123, 123, 125, 124, 125, 123, 123, 126, 122, 125, 122, 125, 125, 124, 126, 124, 121, 122, 125, 124, 121, 126, 121, 125, 122, 121, 126, 122, 123, 122, 123, 121, 124, 123, 123, 125, 121, 125, 123, 124, 121, 123, 122, 123, 123, 123, 124, 125, 123, 124, 122, 125, 123, 124, 124, 126, 123, 126, 128, 125, 123, 124, 128, 125, 126, 124, 126, 125, 125, 125, 126, 125, 125, 126, 126, 124, 128, 124, 125, 126, 124, 125, 125, 126, 126, 124, 125, 128, 125, 128, 126, 125, 126, 125, 126, 128, 125, 126, 125, 128, 124, 126, 126, 126, 129, 126, 128, 126, 125, 129, 126, 126, 129, 128, 126, 128, 126, 126, 129, 126, 128, 126, 130, 126, 128, 128, 125, 129, 128, 128, 128, 128, 128, 129, 125, 105, 91, 102, 82, 37, 41, 44, 50, 83, 99, 101, 104, 102, 105, 103, 106, 105, 109, 113, 107, 116, 123, 121, 109, 91, 106, 107, 86, 87, 92, 87, 90, 92, 100, 97, 103, 100, 116, 108, 112, 115, 116, 132, 135, 129, 144, 151, 149, 160, 158, 166, 157, 179, 166, 178, 156, 172, 166, 167, 162, 163, 166, 166, 162, 170, 170, 170, 173, 170, 155, 153, 152, 137, 150, 135, 144, 135, 141, 131, 138, 135, 131, 136, 137, 138, 139, 146, 140, 146, 148, 152, 160, 148, 171, 166, 162, 168, 164, 164, 176, 162, 174, 170, 170, 161, 164, 176, 171, 174, 166, 171, 167, 166, 146, 158, 138, 153, 147, 129, 133, 129, 124, 123, 130, 128, 121, 130, 129, 120, 131, 128, 131, 131, 128, 144, 125, 144, 134, 154, 137, 156, 149, 148, 157, 145, 161, 154, 150, 138, 154, 153, 149, 140, 148, 140, 144, 141, 144, 130, 138, 124, 139, 118, 133, 112, 113, 119, 115, 113, 108, 114, 105, 113, 108, 109, 119, 111, 114, 121, 116, 122, 119, 125, 133, 123, 132, 133, 130, 145, 131, 123, 137, 130, 131, 131, 131, 135, 116, 130, 121, 117, 125, 116, 119, 231, 234, 248, 220, 215, 212, 197, 188, 182, 187, 165, 167, 162, 166, 140, 160, 147, 150, 138, 160, 133, 147, 142, 156, 144, 140, 166, 148, 148, 155, 158, 147, 147, 152, 142, 144, 138, 137, 128, 119, 131, 119, 105, 114, 106, 95, 91, 89, 90, 72, 66, 65, 71, 54, 51, 58, 42, 56, 44, 43, 58, 42, 51, 49, 61, 45, 61, 59, 59, 72, 77, 60, 86, 74, 86, 92, 79, 98, 85, 88, 93, 91, 89, 89, 86, 85, 86, 72, 79, 74, 71, 76, 57, 71, 59, 48, 50, 58, 50, 37, 51, 50, 37, 51, 44, 55, 41, 54, 52, 58, 59, 60, 69, 70, 72, 76, 81, 86, 93, 95, 98, 95, 106, 95, 108, 105, 105, 106, 103, 107, 104, 104, 104, 98, 97, 105, 91, 90, 86, 96, 88, 74, 85, 81, 77, 80, 75, 77, 83, 77, 80, 80, 90, 85, 92, 89, 92, 101, 103, 98, 112, 113, 115, 122, 122, 117, 139, 123, 133, 136, 139, 133, 135, 140, 139, 129, 140, 130, 136, 135, 135, 119, 61, 71, 96, 108, 67, 72, 60, 61, 48, 55, 49, 55, 55, 64, 66, 79, 99, 73, 70, 65, 102, 121, 109, 124, 132, 146, 157, 103, 138, 202, 160, 171, 212, 206, 212, 227, 222, 206, 210, 211, 205, 203, 201, 192, 185, 163, 146, 155, 151, 153, 170, 160, 150, 128, 113, 98, 108, 128, 118, 117, 125, 113, 101, 141, 145, 149, 150, 158, 149, 160, 193, 188, 192, 198, 196, 212, 208, 211, 232, 243, 255, 222, 218, 224, 228, 240, 200, 186, 213, 180, 155, 195, 194, 165, 165, 164, 153, 155, 133, 140, 144, 136, 131, 136, 134, 101, 106, 117, 122, 115, 137, 153, 161, 169, 174, 170, 172, 179, 187, 200, 188, 201, 222, 216, 205, 210, 217, 228, 236, 193, 179, 213, 217, 226, 206, 182, 179, 194, 163, 141, 154, 141, 155, 151, 137, 130, 121, 120, 118, 121, 123, 120, 104, 131, 144, 134, 131, 141, 150, 169, 173, 150, 155, 166, 161, 139, 156, 169, 177, 184, 190, 195, 212, 210, 193, 180, 158, 163, 181, 166, 165, 152, 144, 149, 156, 138, 140, 117, 123, 115, 120, 118, 115, 118, 115, 104, 102, 111, 106, 105, 122, 123, 132, 142, 140, 145, 139, 148, 147, 146, 148, 146, 144, 160, 162, 150, 144, 157, 174, 164, 157, 145, 120, 131, 147, 151, 118, 118, 129, 133, 122, 130, 115, 114, 102, 96, 102, 124, 117, 95, 96, 98, 99, 108, 115, 113, 118, 105, 101, 120, 134, 135, 138, 134, 135, 138, 137, 138, 150, 150, 140, 132, 154, 163, 147, 147, 144, 140, 140, 137, 141, 148, 142, 132, 128, 117, 112, 111, 112, 111, 106, 106, 112, 92, 83, 81, 79, 92, 109, 111, 114, 111, 89, 85, 99, 103, 115, 119, 119, 120, 119, 119, 122, 132, 135, 137, 134, 134, 133, 133, 132, 133, 125, 118, 114, 120, 142, 134, 112, 106, 107, 105, 107, 103, 106, 90, 72, 82, 100, 106, 87, 79, 85, 104, 109, 98, 92, 102, 112, 111, 112, 111, 115, 113, 115, 117, 116, 114, 117, 115, 119, 117, 117, 116, 121, 139, 141, 135, 130, 124, 107, 114, 111, 107, 109, 111, 107, 106, 106, 107, 105, 105, 103, 106, 101, 89, 96, 103, 109, 92, 80, 87, 109, 108, 112, 114, 109, 115, 113, 113, 115, 115, 116, 117, 115, 118, 117, 117, 115, 117, 117, 117, 119, 114, 116, 118, 115, 114, 117, 114, 113, 112, 114, 112, 115, 108, 112, 112, 111, 98, 99, 99, 98, 98, 106, 113, 114, 116, 115, 116, 114, 117, 117, 117, 117, 120, 117, 119, 118, 119, 120, 120, 119, 120, 121, 120, 120, 119, 119, 121, 117, 121, 118, 119, 118, 116, 118, 117, 118, 116, 114, 116, 116, 116, 114, 117, 114, 115, 115, 115, 115, 117, 116, 115, 117, 119, 116, 117, 117, 120, 119, 118, 119, 121, 119, 122, 120, 122, 119, 120, 122, 122, 120, 120, 121, 122, 120, 119, 121, 121, 120, 118, 121, 118, 118, 119, 118, 119, 119, 116, 119, 118, 118, 118, 119, 118, 119, 117, 120, 119, 120, 121, 120, 120, 121, 121, 122, 121, 123, 123, 121, 122, 125, 123, 123, 123, 124, 123, 124, 124, 122, 124, 122, 123, 123, 124, 122, 123, 121, 123, 120, 123, 122, 120, 122, 122, 121, 121, 122, 122, 121, 122, 122, 123, 121, 122, 124, 124, 123, 123, 124, 125, 124, 125, 125, 125, 128, 128, 125, 128, 129, 125, 129, 125, 128, 128, 125, 129, 128, 124, 129, 125, 125, 125, 125, 125, 125, 124, 125, 125, 123, 125, 124, 125, 124, 125, 124, 128, 124, 128, 124, 128, 128, 129, 128, 128, 125, 130, 129, 130, 129, 128, 130, 129, 129, 128, 116, 88, 163, 143, 158, 154, 109, 141, 133, 124, 83, 102, 77, 97, 94, 163, 90, 83, 129, 107, 96, 159, 114, 152, 169, 177, 105, 171, 143, 147, 165, 114, 143, 163, 121, 185, 120, 132, 162, 62, 104, 94, 53, 58, 69, 22, 82, 40, 141, 133, 151, 200, 202, 205, 131, 177, 222, 186, 189, 219, 191, 249, 139, 191, 191, 108, 109, 111, 108, 90, 7, 62, 54, 24, 75, 18, 34, 31, 39, 39, 46, 49, 51, 66, 123, 117, 163, 159, 193, 176, 196, 214, 196, 210, 255, 242, 244, 234, 235, 224, 231, 204, 211, 189, 107, 132, 162, 75, 52, 119, 102, 63, 58, 56, 94, 34, 9, 47, 21, 37, 31, 89, 95, 63, 158, 144, 133, 164, 175, 153, 185, 172, 205, 248, 198, 171, 221, 205, 178, 193, 105, 154, 161, 61, 101, 106, 24, 89, 78, 58, 86, 53, 60, 64, 65, 62, 64, 59, 57, 61, 141, 93, 110, 139, 157, 150, 155, 182, 177, 203, 151, 166, 221, 182, 160, 214, 192, 198, 157, 200, 158, 163, 198, 150, 106, 116, 131, 117, 113, 115, 115, 81, 87, 104, 80, 67, 87, 65, 57, 91, 81, 88, 87, 99, 119, 100, 80, 149, 88, 110, 96, 152, 123, 103, 140, 73, 191, 167, 139, 150, 110, 144, 136, 71, 94, 124, 91, 96, 120, 86, 89, 96, 107, 97, 117, 103, 83, 71, 78, 154, 115, 96, 148, 186, 101, 181, 158, 176, 203, 177, 185, 168, 172, 224, 144, 235, 191, 188, 205, 165, 186, 216, 188, 103, 149, 164, 119, 136, 135, 100, 121, 138, 75, 99, 82, 53, 157, 39, 66, 100, 135, 64, 90, 85, 78, 81, 95, 116, 158, 104, 124, 90, 151, 160, 101, 104, 171, 109, 144, 139, 72, 167, 141, 132, 91, 100, 145, 145, 154, 95, 88, 164, 155, 94, 115, 145, 106, 165, 147, 182, 148, 133, 188, 173, 138, 174, 160, 166, 136, 133, 231, 125, 136, 234, 150, 139, 210, 201, 168, 151, 161, 150, 174, 145, 154, 141, 133, 179, 134, 121, 158, 125, 160, 85, 48, 104, 147, 95, 107, 115, 109, 81, 80, 111, 107, 92, 145, 77, 52, 79, 106, 65, 118, 71, 59, 139, 123, 87, 117, 144, 102, 119, 65, 89, 141, 204, 116, 147, 100, 113, 181, 161, 132, 131, 151, 167, 160, 205, 169, 153, 163, 150, 163, 175, 140, 153, 146, 151, 195, 146, 178, 129, 203, 188, 201, 187, 134, 172, 122, 185, 160, 187, 133, 193, 174, 104, 121, 125, 178, 129, 138, 117, 96, 59, 57, 132, 91, 134, 89, 89, 89, 88, 92, 75, 10, 52, 8, 110, 23, 103, 87, 68, 36, 56, 57, 36, 124, 87, 42, 68, 91, 58, 137, 106, 57, 72, 65, 101, 138, 133, 79, 106, 144, 129, 139, 124, 88, 164, 175, 48, 122, 129, 136, 134, 130, 150, 187, 75, 140, 124, 134, 138, 189, 166, 125, 135, 192, 106, 177, 208, 186, 192, 111, 206, 160, 114, 153, 140, 147, 111, 146, 95, 132, 93, 99, 91, 109, 104, 95, 107, 92, 100, 99, 76, 90, 107, 92, 114, 69, 49, 74, 69, 87, 47, 81, 89, 33, 57, 99, 75, 74, 140, 95, 99, 81, 103, 129, 91, 110, 121, 136, 88, 109, 159, 119, 144, 139, 149, 104, 149, 138, 151, 138, 151, 135, 155, 147, 187, 181, 130, 151, 187, 130, 144, 128, 146, 121, 223, 160, 205, 166, 120, 123, 154, 177, 129, 162, 146, 190, 131, 110, 160, 214, 108, 120, 106, 119, 108, 118, 109, 118, 113, 105, 81, 135, 100, 139, 75, 121, 68, 117, 87, 78, 125, 79, 116, 95, 94, 86, 92, 87, 86, 50, 140, 136, 99, 144, 122, 110, 59, 116, 165, 147, 159, 150, 157, 150, 157, 150, 154, 150, 153, 151, 152, 150, 150, 150, 149, 151, 148, 149, 147, 158, 146, 168, 175, 150, 140, 147, 139, 151, 159, 205, 194, 124, 192, 154, 189, 124, 140, 195, 182, 191, 115, 134, 182, 125, 128, 120, 118, 121, 121, 128, 115, 124, 117, 122, 117, 123, 117, 125, 115, 129, 114, 132, 106, 97, 120, 133, 99, 73, 81, 46, 131, 104, 64, 58, 150, 120, 113, 137, 135, 146, 140, 145, 143, 144, 141, 144, 141, 144, 139, 145, 140, 143, 139, 145, 138, 143, 139, 141, 138, 144, 146, 143, 158, 145, 162, 139, 136, 135, 136, 135, 143, 139, 134, 136, 133, 137, 133, 135, 134, 134, 134, 135, 132, 135, 132, 136, 132, 134, 132, 135, 133, 133, 133, 133, 132, 135, 130, 135, 131, 133, 132, 132, 133, 132, 132, 133, 131, 132, 132, 131, 132, 132, 132, 132, 130, 133, 130, 134, 125, 122, 133, 131, 132, 131, 131, 131, 131, 132, 130, 131, 132, 131, 130, 131, 131, 131, 129, 132, 129, 131, 131, 130, 131, 130, 130, 130, 130, 131, 129, 131, 129, 131, 129, 130, 129, 129, 131, 130, 129, 129, 131, 128, 130, 128, 130, 129, 130, 128, 130, 129, 130, 128, 128, 130, 129, 129, 129, 129, 128, 128, 130, 129, 125, 130, 119, 138, 68, 157, 230, 159, 54, 96, 82, 92, 123, 115, 196, 222, 227, 152, 107, 105, 110, 172, 227, 215, 187, 114, 119, 157, 143, 143, 138, 117, 172, 169, 156, 111, 137, 106, 120, 153, 176, 165, 179, 162, 185, 116, 126, 159, 136, 172, 152, 162, 150, 156, 103, 126, 70, 118, 153, 142, 147, 141, 143, 137, 140, 121, 130, 133, 130, 130, 126, 125, 124, 122, 121, 120, 117, 117, 117, 115, 114, 111, 112, 108, 108, 102, 102, 90, 91, 81, 82, 73, 81, 57, 96, 6, 47, 137, 105, 48, 40, 51, 40, 50, 133, 113, 77, 61, 63, 87, 76, 105, 72, 82, 102, 93, 41, 77, 114, 115, 105, 56, 73, 118, 97, 125, 72, 86, 121, 124, 121, 125, 136, 132, 129, 64, 69, 62, 93, 128, 126, 152, 132, 88, 72, 74, 90, 152, 148, 160, 157, 163, 159, 162, 158, 160, 156, 157, 154, 155, 152, 153, 150, 151, 145, 151, 143, 155, 103, 61, 146, 145, 149, 144, 146, 144, 143, 144, 142, 144, 137, 145, 97, 105, 126, 122, 121, 115, 112, 114, 105, 134, 97, 49, 81, 104, 80, 137, 153, 83, 121, 95, 97, 89, 117, 162, 139, 120, 81, 133, 103, 118, 132, 150, 147, 115, 77, 112, 118, 91, 86, 42, 52, 106, 91, 126, 152, 104, 99, 68, 121, 108, 123, 131, 121, 120, 126, 123, 130, 125, 134, 129, 137, 131, 141, 135, 141, 137, 144, 139, 147, 143, 148, 144, 98, 166, 255, 142, 138, 116, 103, 133, 152, 211, 191, 140, 70, 166, 223, 195, 148, 80, 133, 165, 200, 250, 227, 128, 63, 147, 164, 161, 188, 222, 173, 153, 133, 133, 170, 241, 209, 115, 85, 154, 209, 234, 205, 163, 94, 68, 139, 206, 248, 187, 138, 118, 148, 122, 168, 191, 163, 163, 153, 166, 145, 208, 175, 121, 157, 139, 155, 166, 163, 152, 156, 154, 155, 157, 129, 88, 185, 183, 151, 155, 161, 153, 138, 149, 157, 146, 163, 156, 153, 139, 77, 138, 176, 164, 147, 151, 149, 150, 151, 137, 122, 150, 139, 155, 146, 234, 163, 149, 105, 98, 153, 138, 146, 142, 143, 142, 139, 146, 128, 99, 149, 136, 144, 138, 143, 137, 141, 137, 140, 136, 139, 137, 137, 135, 137, 134, 136, 135, 136, 131, 135, 129, 136, 84, 109, 134, 125, 135, 122, 152, 161, 117, 136, 120, 138, 85, 122, 129, 133, 124, 137, 156, 133, 109, 83, 144, 105, 86, 146, 115, 168, 158, 162, 160, 115, 135, 124, 124, 54, 136, 121, 139, 120, 155, 199, 110, 135, 118, 139, 93, 59, 152, 124, 139, 115, 184, 198, 89, 139, 113, 145, 66, 62, 141, 125, 104, 69, 218, 184, 118, 136, 123, 132, 31, 70, 145, 126, 140, 132, 240, 168, 120, 134, 123, 133, 123, 210, 254, 184, 112, 121, 152, 143, 50, 59, 129, 105, 64, 17, 59, 69, 113, 150, 220, 221, 122, 132, 121, 116, 29, 31, 75, 73, 109, 171, 213, 255, 187, 207, 210, 115, 73, 31, 2, 14, 103, 166, 239, 255, 241, 250, 176, 122, 88, 43, 41, 101, 120, 155, 187, 179, 238, 144, 109, 70, 51, 113, 113, 122, 96, 0, 10, 60, 72, 69, 85, 137, 137, 139, 138, 137, 139, 135, 158, 200, 191, 196, 238, 246, 185, 181, 156, 94, 47, 6, 0, 45, 72, 116, 137, 130, 135, 130, 135, 131, 136, 129, 141, 186, 234, 250, 218, 155, 115, 116, 115, 116, 115, 116, 116, 115, 117, 114, 121, 95, 55, 62, 109, 126, 121, 126, 122, 126, 122, 125, 124, 126, 125, 124, 124, 126, 124, 129, 89, 30, 10, 16, 20, 23, 55, 114, 153, 155, 155, 156, 153, 155, 153, 154, 153, 153, 152, 152, 150, 152, 149, 151, 148, 150, 148, 148, 147, 148, 145, 147, 145, 146, 144, 145, 142, 144, 141, 146, 128, 80, 85, 83, 88, 89, 89, 93, 95, 96, 98, 151, 161, 159, 159, 158, 158, 157, 157, 156, 153, 155, 152, 155, 151, 152, 149, 152, 147, 153, 119, 88, 148, 148, 150, 147, 148, 146, 147, 145, 146, 143, 144, 143, 142, 142, 141, 140, 141, 139, 140, 138, 138, 137, 138, 137, 135, 137, 134, 135, 134, 134, 134, 132, 78, 51, 116, 220, 166, 124, 91, 129, 139, 192, 189, 37, 136, 217, 116, 61, 81, 20, 111, 162, 84, 190, 136, 112, 155, 54, 233, 140, 51, 136, 230, 75, 105, 135, 142, 183, 143, 152, 199, 122, 195, 156, 111, 0, 114, 130, 68, 77, 51, 145, 146, 243, 193, 82, 72, 5, 209, 96, 56, 101, 68, 163, 55, 132, 99, 205, 142, 255, 82, 69, 116, 169, 125, 40, 115, 96, 55, 86, 91, 166, 136, 240, 193, 159, 121, 74, 151, 162, 105, 133, 196, 163, 199, 99, 183, 133, 74, 192, 125, 65, 229, 163, 51, 102, 199, 169, 45, 149, 91, 114, 21, 142, 156, 61, 103, 99, 125, 114, 84, 119, 234, 193, 74, 165, 142, 74, 109, 138, 189, 91, 49, 84, 193, 173, 159, 41, 99, 199, 119, 95, 48, 143, 169, 143, 89, 166, 140, 108, 103, 135, 183, 180, 52, 234, 173, 92, 86, 121, 226, 116, 91, 65, 62, 93, 145, 145, 205, 189, 206, 64, 158, 152, 132, 32, 142, 99, 177, 119, 135, 158, 56, 93, 200, 15, 121, 175, 81, 145, 125, 125, 109, 159, 108, 165, 156, 121, 14, 51, 161, 163, 108, 122, 135, 122, 111, 108, 155, 105, 96, 165, 58, 168, 155, 21, 130, 146, 71, 138, 81, 95, 111, 91, 179, 169, 112, 129, 210, 128, 88, 65, 200, 58, 105, 203, 64, 64, 146, 209, 136, 156, 152, 114, 115, 148, 130, 115, 128, 54, 159, 34, 119, 135, 118, 116, 193, 222, 96, 168, 41, 169, 195, 177, 79, 161, 81, 203, 111, 138, 135, 148, 195, 162, 62, 101, 135, 176, 82, 129, 186, 93, 91, 58, 195, 142, 106, 102, 108, 130, 149, 149, 145, 101, 67, 169, 128, 22, 103, 202, 155, 67, 56, 122, 208, 192, 128, 148, 61, 135, 125, 161, 135, 156, 156, 143, 96, 37, 59, 129, 109, 143, 112, 189, 132, 69, 162, 148, 166, 82, 189, 62, 138, 119, 128, 86, 242, 119, 68, 139, 168, 54, 72, 146, 219, 98, 116, 67, 209, 176, 103, 112, 119, 138, 151, 84, 84, 176, 159, 109, 136, 135, 187, 118, 98, 161, 98, 72, 98, 102, 183, 169, 114, 115, 34, 91, 168, 96, 121, 138, 82, 109, 119, 196, 130, 138, 128, 106, 49, 128, 172, 151, 121, 99, 99, 112, 149, 111, 119, 159, 61, 128, 145, 133, 145, 129, 116, 148, 124, 98, 133, 159, 143, 140, 132, 140, 81, 96, 128, 118, 105, 176, 122, 109, 119, 124, 92, 162, 148, 153, 88, 138, 136, 162, 105, 75, 91, 158, 189, 187, 93, 92, 95, 210, 234, 148, 114, 98, 111, 118, 187, 135, 88, 145, 130, 159, 111, 91, 135, 103, 142, 61, 162, 139, 81, 119, 166, 168, 31, 86, 142, 140, 105, 148, 135, 119, 176, 112, 61, 95, 138, 149, 135, 93, 165, 142, 146, 122, 105, 102, 125, 140, 99, 92, 145, 152, 136, 143, 89, 124, 173, 121, 152, 118, 88, 49, 168, 62, 54, 138, 173, 55, 155, 183, 189, 132, 173, 149, 152, 79, 18, 119, 118, 146, 151, 114, 102, 168, 125, 140, 74, 130, 165, 185, 121, 79, 156, 158, 75, 109, 109, 77, 163, 209, 140, 109, 84, 148, 165, 165, 168, 109, 102, 88, 198, 112, 92, 111, 162, 138, 142, 193, 108, 102, 103, 205, 145, 118, 51, 132, 67, 99, 142, 133, 96, 105, 159, 190, 135, 86, 71, 106, 139, 205, 121, 151, 105, 125, 118, 133, 101, 179, 152, 56, 46, 101, 101, 138, 168, 139, 116, 149, 139, 79, 136, 99, 142, 119, 142, 106, 151, 161, 176, 177, 176, 99, 77, 75, 148, 111, 139, 88, 128, 124, 121, 158, 138, 132, 169, 155, 165, 179, 132, 89, 86, 92, 119, 124, 99, 132, 125, 166, 138, 124, 159, 93, 163, 209, 172, 58, 45, 112, 106, 149, 155, 155, 118, 133, 183, 105, 61, 125, 142, 79, 165, 82, 112, 109, 133, 112, 162, 182, 118, 64, 79, 173, 140, 149, 109, 121, 173, 189, 114, 114, 101, 96, 124, 95, 102, 155, 118, 149, 135, 133, 106, 133, 158, 114, 118, 132, 75, 105, 158, 128, 148, 133, 135, 115, 108, 105, 136, 142, 108, 151, 152, 69, 159, 152, 119, 142, 138, 111, 82, 99, 91, 169, 152, 121, 105, 176, 199, 153, 86, 93, 121, 166, 172, 102, 96, 143, 45, 75, 198, 176, 93, 118, 122, 106, 108, 84, 121, 111, 182, 189, 106, 114, 78, 82, 143, 111, 125, 121, 72, 143, 109, 105, 145, 203, 173, 99, 101, 49, 143, 124, 111, 135, 143, 91, 79, 103, 162, 173, 151, 139, 105, 114, 106, 132, 136, 103, 91, 135, 146, 124, 149, 132, 145, 132, 115, 86, 86, 84, 121, 153, 121, 185, 151, 133, 138, 79, 109, 139, 146, 109, 125, 124, 143, 136, 143, 162, 130, 112, 102, 103, 79, 96, 125, 152, 173, 112, 122, 186, 161, 103, 125, 84, 166, 105, 118, 138, 133, 155, 135, 136, 182, 109, 54, 81, 111, 121, 129, 198, 149, 163, 152, 130, 130, 91, 91, 159, 84, 132, 112, 138, 133, 136, 116, 138, 132, 125, 118, 121, 96, 129, 122, 119, 142, 161, 112, 121, 116, 105, 135, 169, 140, 81, 118, 138, 145, 129, 138, 158, 103, 102, 58, 95, 121, 124, 173, 136, 82, 130, 156, 163, 105, 140, 142, 156, 125, 95, 122, 129, 145, 165, 139, 124, 130, 122, 108, 41, 81, 151, 205, 122, 102, 130, 145, 156, 138, 129, 115, 105, 151, 132, 132, 151, 119, 62, 130, 133, 145, 156, 109, 99, 112, 109, 136, 138, 114, 118, 175, 125, 124, 142, 111, 118, 149, 143, 158, 183, 158, 61, 75, 125, 112, 132, 153, 124, 130, 172, 142, 116, 102, 109, 115, 88, 105, 153, 175, 112, 139, 152, 129, 93, 132, 125, 136, 118, 115, 132, 121, 130, 132, 132, 165, 122, 86, 106, 121, 79, 82, 135, 132, 135, 176, 168, 143, 96, 55, 132, 138, 148, 143, 145, 139, 161, 132, 166, 67, 93, 116, 162, 151, 142, 115, 152, 130, 114, 138, 96, 149, 116, 138, 140, 116, 111, 118, 106, 133, 129, 103, 148, 122, 130, 142, 140, 108, 102, 162, 111, 148, 161, 109, 119, 138, 145, 93, 101, 152, 129, 86, 114, 103, 115, 182, 163, 122, 71, 77, 99, 133, 195, 168, 152, 130, 148, 128, 92, 130, 91, 81, 81, 155, 115, 103, 102, 146, 153, 176, 133, 156, 132, 142, 132, 125, 122, 72, 102, 105, 139, 143, 163, 133, 146, 132, 136, 140, 143, 148, 125, 114, 112, 114, 152, 136, 125, 105, 105, 108, 143, 132, 156, 143, 132, 124, 99, 93, 125, 114, 116, 103, 59, 96, 132, 139, 166, 124, 149, 153, 109, 169, 142, 109, 129, 122, 115, 161, 108, 78, 118, 119, 139, 138, 124, 140, 124, 152, 119, 102, 108, 143, 112, 119, 129, 145, 124, 118, 77, 124, 148, 112, 130, 96, 91, 108, 136, 84, 79, 139, 143, 132, 166, 129, 138, 96, 92, 111, 186, 139, 133, 111, 175, 132, 112, 135, 124, 114, 79, 118, 124, 109, 102, 133, 135, 153, 165, 183, 158, 111, 119, 121, 91, 146, 132, 122, 119, 98, 71, 88, 142, 155, 148, 95, 108, 133, 159, 145, 84, 138, 135, 98, 86, 159, 132, 143, 156, 129, 161, 173, 149, 136, 102, 96, 108, 124, 138, 105, 88, 148, 145, 115, 149, 118, 155, 151, 148, 115, 133, 103, 95, 145, 106, 129, 132, 133, 152, 128, 136, 153, 128, 128, 112, 95, 116, 103, 129, 125, 145, 145, 111, 95, 122, 121, 168, 158, 136, 105, 148, 161, 111, 142, 122, 118, 121, 138, 91, 133, 119, 140, 103, 106, 125, 132, 132, 129, 130, 109, 146, 130, 114, 119, 119, 132, 121, 124, 119, 151, 172, 115, 105, 109, 102, 121, 138, 130, 133, 122, 139, 111, 158, 153, 159, 115, 98, 118, 129, 115, 136, 129, 139, 111, 99, 133, 136, 99, 95, 109, 129, 130, 162, 153, 130, 129, 75, 118, 71, 103, 145, 162, 143, 136, 122, 148, 125, 128, 125, 105, 133, 133, 119, 119, 88, 133, 115, 109, 91, 119, 103, 114, 146, 159, 136, 88, 93, 114, 152, 146, 172, 149, 156, 162, 125, 135, 146, 118, 128, 115, 124, 121, 143, 132, 108, 116, 96, 92, 136, 128, 109, 125, 125, 139, 115, 143, 133, 148, 151, 116, 122, 142, 138, 121, 119, 140, 130, 139, 143, 101, 82, 129, 125, 140, 152, 115, 136, 118, 136, 130, 122, 128, 128, 105, 98, 129, 92, 129, 136, 128, 115, 109, 155, 158, 165, 128, 143, 142, 132, 129, 124, 114, 146, 95, 91, 111, 96, 149, 145, 125, 136, 130, 115, 119, 112, 143, 135, 143, 149, 112, 98, 116, 136, 122, 162, 143, 116, 121, 106, 114, 122, 105, 112, 133, 119, 132, 128, 121, 166, 145, 130, 124, 119, 101, 105, 106, 96, 114, 128, 166, 139, 132, 130, 161, 132, 139, 124, 99, 132, 122, 138, 133, 138, 146, 148, 135, 121, 140, 128, 129, 111, 103, 122, 119, 128, 129, 115, 133, 119, 114, 122, 122, 121, 135, 146, 136, 142, 155, 111, 118, 145, 125, 99, 136, 125, 116, 119, 149, 118, 119, 148, 133, 108, 105, 142, 138, 142, 108, 130, 105, 111, 101, 135, 145, 139, 146, 132, 153, 145, 118, 136, 119, 122, 105, 111, 142, 129, 132, 121, 129, 111, 122, 122, 111, 102, 143, 145, 138, 155, 130, 145, 96, 102, 111, 130, 116, 114, 119, 139, 132, 148, 121, 119, 128, 151, 139, 130, 143, 116, 105, 129, 102, 109, 115, 119, 119, 122, 143, 133, 135, 129, 128, 129, 128, 128, 124, 128, 122, 124, 133, 121, 143, 153, 130, 106, 153, 155, 124, 133, 124, 124, 121, 142, 118, 118, 121, 103, 109, 115, 129, 119, 124, 133, 130, 152, 166, 132, 130, 105, 114, 103, 93, 116, 122, 129, 118, 124, 112, 130, 138, 122, 135, 146, 140, 121, 140, 118, 143, 115, 138, 132, 118, 135, 116, 114, 145, 118, 121, 135, 102, 122, 124, 143, 135, 128, 128, 115, 114, 122, 125, 112, 130, 152, 116, 145, 128, 112, 122, 103, 112, 132, 130, 124, 130, 125, 136, 140, 118, 112, 115, 129, 116, 112, 118, 136, 138, 138, 132, 122, 146, 116, 121, 119, 119, 118, 128, 151, 119, 111, 132, 124, 129, 129, 125, 142, 132, 128, 86, 124, 129, 129, 115, 128, 136, 135, 130, 114, 130, 138, 138, 129, 125, 119, 130, 149, 133, 121, 129, 124, 121, 109, 119, 111, 108, 125, 138, 129, 135, 133, 124, 133, 148, 129, 111, 112, 108, 119, 146, 111, 135, 136, 130, 132, 121, 129, 135, 114, 129, 130, 133, 142, 129, 133, 112, 101, 121, 121, 138, 122, 148, 138, 135, 139, 112, 119, 135, 124, 133, 121, 125, 139, 119, 118, 125, 112, 114, 119, 124, 118, 133, 125, 128, 128, 132, 142, 119, 118, 119, 143, 129, 130, 121, 129, 140, 125, 121, 128, 115, 122, 121, 125, 121, 136, 132, 128, 125, 130, 133, 129, 115, 121, 128, 138, 129, 124, 139, 129, 130, 130, 121, 121, 119, 139, 118, 124, 122, 129, 139, 121, 128, 124, 119, 122, 118, 140, 121, 136, 140, 116, 119, 124, 132, 114, 119, 133, 115, 128, 138, 112, 118, 124, 135, 130, 133, 138, 132, 132, 124, 124, 136, 128, 119, 132, 128, 119, 122, 130, 138, 129, 138, 118, 121, 129, 122, 129, 128, 129, 128, 133, 129, 111, 128, 146, 122, 122, 133, 111, 124, 116, 128, 122, 122, 119, 119, 139, 158, 133, 139, 125, 118, 115, 124, 125, 129, 132, 122, 128, 119, 128, 124, 129, 121, 124, 128, 130, 133, 135, 129, 128, 145, 139, 122, 116, 118, 130, 135, 136, 125, 114, 128, 115, 112, 116, 128, 135, 111, 124, 130, 136, 143, 124, 124, 125, 111, 130, 138, 139, 132, 121, 130, 112, 118, 128, 118, 122, 128, 133, 122, 133, 132, 119, 136, 130, 128, 135, 119, 139, 129, 118, 128, 122, 122, 125, 129, 124, 119, 121, 125, 128, 119, 128, 129, 129, 130, 140, 119, 130, 121, 119, 125, 129, 130, 138, 133, 122, 125, 121, 130, 136, 122, 133, 128, 109, 133, 128, 125, 124, 124, 135, 132, 121, 132, 108, 114, 129, 125, 128, 122, 125, 118, 128, 140, 133, 139, 135, 115, 125, 119, 128, 135, 135, 124, 122, 118, 128, 122, 122, 119, 118, 132, 138, 133, 124, 132, 118, 129, 128, 124, 114, 128, 111, 132, 132, 121, 129, 132, 135, 128, 125, 128, 119, 124, 121, 125, 128, 119, 130, 130, 133, 135, 124, 125, 122, 125, 129, 121, 129, 122, 125, 128, 130, 132, 132, 128, 129, 119, 125, 129, 129, 130, 121, 135, 128, 111, 108, 116, 133, 135, 119, 135, 132, 118, 136, 140, 122, 128, 140, 128, 124, 125, 128, 125, 125, 128, 121, 130, 129, 125, 129, 124, 124, 118, 129, 122, 129, 125, 133, 130, 128, 118, 133, 118, 116, 125, 130, 130, 132, 125, 132, 132, 124, 125, 112, 125, 125, 129, 129, 129, 129, 124, 129, 132, 125, 125, 128, 124, 116, 124, 130, 124, 124, 125, 125, 124, 124, 124, 132, 128, 130, 125, 125, 133, 130, 125, 124, 128, 118, 125, 124, 130, 130, 135, 118, 122, 125, 132, 133, 125, 125, 121, 122, 124, 128, 129, 124, 125, 129, 130, 122, 125, 129, 130, 128, 133, 122, 119, 125, 118, 128, 130, 129, 129, 119, 121, 129, 132, 136, 133, 129, 125, 121, 125, 125, 121, 109, 121, 124, 129, 130, 132, 128, 129, 124, 129, 133, 136, 121, 125, 133, 132, 116, 114, 122, 125, 129, 129, 125, 129, 135, 129, 122, 129, 119, 121, 125, 128, 139, 124, 132, 129, 130, 122, 132, 129, 121, 128, 115, 122, 132, 122, 130, 129, 122, 121, 128, 122, 132, 128, 125, 125, 124, 129, 129, 128, 122, 129, 125, 118, 128, 130, 139, 128, 114, 129, 124, 125, 133, 124, 128, 129, 125, 132, 130, 128, 129, 125, 125, 128, 132, 130, 121, 122, 130, 125, 132, 130, 124, 124, 130, 128, 122, 132, 132, 132, 128, 125, 124, 124, 129, 122, 122, 125, 125, 132, 122, 128, 125, 128, 129, 128, 124, 125, 128, 132, 125, 128, 128, 128, 121, 125, 119, 129, 130, 124, 128, 133, 128, 128, 125, 130, 129, 129, 128, 125, 129, 128, 122, 129, 128, 129, 125, 128, 125, 128, 129, 128, 124, 125, 125, 124, 125, 132, 119, 132, 122, 119, 130, 124, 129, 129, 129, 129, 133, 125, 122, 129, 133, 119, 129, 121, 125, 122, 129, 128, 129, 124, 130, 125, 128, 124, 124, 128, 132, 125, 125, 128, 125, 130, 128, 122, 122, 129, 124, 132, 121, 124, 129, 128, 136, 128, 125, 129, 125, 124, 129, 124, 128, 128, 125, 124, 129, 125, 128, 122, 128, 124, 130, 129, 128, 124, 125, 129, 125, 129, 129, 129, 125, 132, 124, 130, 135, 128, 124, 125, 124, 125, 128, 122, 128, 138, 125, 124, 128, 129, 124, 124, 128, 125, 125, 128, 125, 124, 124, 128, 125, 132, 128, 125, 124, 125, 124, 124, 129, 124, 129, 124, 125, 128, 124, 129, 125, 129, 125, 125, 125, 128, 125, 129, 128, 125, 125, 128, 125, 129, 124, 128, 128, 132, 128, 124, 128, 125, 124, 125, 121, 119, 124, 125, 129, 125, 125, 128, 130, 124, 129, 128, 128, 125, 128, 128, 128, 125, 129, 125, 128, 125, 128, 128, 128, 125, 128, 129, 125, 128, 128, 125, 129, 124, 128, 128, 128, 125, 128, 129, 128, 128, 128, 128, 128, 125, 128, 124, 129, 128, 129, 128, 128, 124, 129, 124, 129, 125, 129, 125, 129, 128, 125, 129, 125, 128, 128, 128, 128, 125, 129, 125, 129, 124, 128, 128, 128, 125, 128, 128, 124, 129, 125, 128, 128, 125, 129, 125, 129, 125, 128, 125, 124, 132, 129, 129, 128, 125, 128, 128, 125, 128, 128, 125, 128, 129, 125, 128, 128, 129, 125, 125, 130, 128, 124, 128, 128, 128, 128, 128, 129, 125, 125, 129, 125, 125, 129, 128, 125, 128, 128, 128, 128, 128, 125, 128, 129, 128, 128, 125, 129, 128, 128, 128, 125, 128, 128, 128, 128, 128, 125, 129, 125, 128, 125, 125, 129, 128, 128, 129, 133, 135, 135, 136, 139, 138, 141, 140, 143, 143, 144, 145, 145, 147, 148, 147, 150, 148, 151, 150, 152, 150, 153, 153, 154, 152, 155, 154, 155, 154, 157, 154, 160, 149, 195, 236, 224, 227, 220, 221, 215, 214, 211, 209, 206, 203, 201, 197, 196, 192, 192, 187, 187, 182, 182, 177, 178, 172, 174, 169, 169, 164, 166, 160, 161, 156, 160, 147, 182, 255, 250, 249, 242, 233, 201, 190, 191, 174, 145, 139, 142, 120, 96, 74, 56, 40, 17, 27, 25, 31, 30, 5, 1, 9, 10, 14, 28, 58, 58, 63, 63, 65, 92, 110, 137, 150, 172, 186, 175, 183, 206, 208, 200, 203, 191, 207, 224, 216, 213, 187, 166, 168, 160, 162, 150, 121, 110, 116, 100, 74, 56, 33, 36, 39, 19, 2, 9, 12, 14, 18, 21, 23, 29, 30, 35, 37, 40, 44, 44, 68, 91, 90, 92, 117, 136, 161, 172, 163, 173, 196, 199, 193, 192, 186, 186, 180, 180, 173, 175, 168, 168, 162, 163, 153, 124, 106, 80, 75, 84, 62, 41, 44, 48, 27, 11, 19, 20, 25, 28, 32, 35, 38, 43, 44, 50, 48, 69, 95, 97, 97, 126, 141, 163, 180, 172, 177, 200, 208, 200, 203, 193, 196, 189, 190, 182, 184, 178, 177, 172, 172, 167, 138, 123, 132, 112, 88, 77, 50, 50, 57, 38, 20, 26, 29, 31, 36, 40, 43, 45, 51, 51, 59, 57, 77, 104, 104, 107, 109, 107, 134, 152, 175, 192, 184, 188, 178, 190, 215, 214, 210, 208, 203, 201, 199, 197, 191, 190, 186, 185, 180, 150, 138, 143, 130, 102, 98, 102, 82, 61, 66, 67, 68, 73, 51, 36, 44, 45, 50, 53, 57, 59, 63, 67, 68, 86, 115, 112, 118, 115, 119, 147, 164, 156, 164, 190, 199, 191, 195, 187, 200, 224, 220, 216, 214, 211, 207, 204, 202, 197, 197, 188, 155, 151, 151, 148, 150, 135, 107, 107, 109, 85, 67, 76, 72, 79, 76, 46, 48, 50, 53, 58, 61, 62, 69, 68, 94, 116, 112, 118, 116, 120, 149, 163, 156, 162, 156, 168, 194, 197, 191, 194, 185, 208, 223, 217, 217, 212, 208, 208, 197, 166, 161, 160, 158, 159, 153, 159, 134, 112, 114, 114, 91, 73, 82, 79, 84, 83, 89, 78, 52, 58, 59, 63, 64, 84, 111, 108, 113, 112, 116, 113, 120, 117, 123, 155, 163, 156, 175, 198, 194, 193, 191, 190, 186, 186, 186, 179, 208, 213, 178, 172, 170, 169, 167, 165, 164, 163, 162, 156, 161, 137, 115, 117, 117, 116, 119, 91, 77, 85, 82, 86, 86, 90, 89, 93, 93, 96, 97, 99, 99, 102, 104, 104, 107, 107, 110, 107, 136, 155, 149, 152, 148, 156, 184, 187, 184, 183, 181, 179, 176, 176, 173, 173, 170, 169, 165, 167, 162, 163, 160, 161, 155, 157, 154, 154, 143, 113, 111, 113, 110, 116, 98, 73, 77, 78, 81, 80, 84, 86, 87, 88, 92, 92, 93, 96, 96, 99, 100, 102, 103, 106, 102, 128, 149, 145, 148, 145, 147, 145, 148, 176, 184, 178, 181, 174, 176, 173, 171, 169, 168, 166, 165, 163, 160, 161, 158, 157, 155, 153, 151, 151, 118, 108, 112, 108, 115, 100, 73, 75, 77, 78, 80, 81, 84, 85, 87, 87, 92, 90, 94, 94, 99, 96, 101, 98, 105, 102, 112, 146, 145, 145, 145, 144, 145, 141, 166, 183, 176, 179, 174, 175, 171, 171, 168, 167, 164, 164, 161, 160, 158, 158, 154, 155, 150, 154, 138, 109, 110, 109, 109, 111, 109, 111, 109, 111, 106, 74, 76, 76, 78, 81, 80, 84, 85, 86, 89, 90, 91, 94, 94, 96, 99, 98, 101, 102, 105, 140, 143, 144, 144, 143, 142, 143, 142, 172, 181, 175, 177, 171, 173, 169, 169, 166, 165, 163, 162, 159, 159, 155, 156, 151, 155, 148, 153, 129, 105, 109, 108, 108, 109, 107, 109, 110, 111, 97, 70, 76, 74, 79, 76, 83, 82, 84, 86, 88, 89, 90, 92, 94, 95, 98, 97, 108, 140, 139, 141, 140, 139, 140, 139, 140, 138, 140, 136, 142, 173, 174, 173, 171, 169, 168, 164, 165, 162, 162, 158, 158, 155, 156, 152, 152, 149, 150, 119, 107, 109, 107, 109, 107, 109, 110, 108, 110, 109, 113, 89, 70, 77, 75, 78, 81, 81, 83, 86, 87, 89, 88, 93, 93, 96, 94, 113, 140, 137, 138, 138, 138, 137, 137, 138, 137, 136, 137, 137, 138, 170, 173, 171, 170, 167, 167, 163, 163, 160, 160, 159, 156, 155, 153, 151, 153, 123, 109, 110, 108, 111, 109, 111, 111, 111, 111, 110, 112, 112, 113, 111, 114, 106, 76, 77, 78, 81, 82, 85, 84, 88, 88, 91, 91, 95, 94, 104, 137, 137, 137, 138, 137, 137, 136, 137, 137, 137, 136, 136, 136, 136, 135, 136, 167, 174, 168, 170, 166, 167, 163, 163, 160, 160, 156, 157, 153, 156, 125, 110, 114, 111, 114, 112, 114, 112, 114, 113, 113, 115, 114, 113, 115, 116, 114, 117, 112, 81, 78, 83, 82, 83, 88, 87, 91, 89, 94, 91, 112, 139, 134, 137, 135, 137, 135, 136, 136, 137, 135, 136, 134, 137, 134, 135, 134, 137, 131, 155, 174, 169, 169, 166, 165, 164, 162, 162, 149, 116, 122, 117, 120, 119, 118, 118, 120, 119, 120, 119, 119, 120, 119, 120, 121, 120, 120, 121, 120, 120, 122, 120, 89, 83, 88, 86, 91, 88, 95, 90, 116, 138, 133, 137, 135, 135, 135, 136, 134, 137, 134, 135, 135, 134, 134, 135, 134, 134, 134, 134, 134, 133, 133, 134, 134, 133, 132, 133, 133, 132, 133, 132, 132, 132, 132, 132, 132, 131, 131, 133, 131, 131, 131, 130, 132, 131, 130, 131, 130, 131, 130, 130, 130, 130, 130, 130, 131, 129, 130, 129, 131, 128, 130, 129, 130, 128, 130, 129, 129, 129, 130, 129, 126, 129, 129, 128, 129, 128, 129, 128, 129, 129, 128, 129, 126, 128, 129, 128, 129, 128, 126, 128, 128, 126, 129, 128, 128, 126, 128, 129, 126, 128, 126, 128, 128, 128, 128, 126, 128, 126, 128, 128, 125, 128, 126, 129, 126, 128, 126, 128, 126, 128, 126, 126, 128, 126, 126, 126, 128, 128, 123, 146, 180, 172, 175, 169, 171, 166, 166, 162, 164, 159, 159, 156, 155, 152, 153, 150, 148, 148, 144, 144, 142, 142, 139, 139, 139, 134, 135, 132, 133, 132, 130, 129, 128, 128, 126, 126, 122, 124, 123, 122, 120, 121, 120, 119, 117, 117, 119, 115, 116, 115, 114, 114, 113, 114, 112, 113, 112, 112, 111, 111, 112, 109, 111, 110, 110, 110, 110, 107, 111, 107, 107, 111, 106, 107, 109, 107, 109, 107, 110, 106, 110, 105, 111, 106, 109, 106, 110, 106, 111, 104, 117, 50, 6, 17, 16, 23, 27, 30, 35, 36, 43, 44, 51, 0, 57, 173, 130, 111, 114, 113, 151, 168, 122, 116, 160, 166, 171, 139, 61, 65, 5, 113, 252, 115, 0, 89, 140, 173, 189, 143, 134, 135, 139, 189, 163, 79, 111, 142, 121, 82, 151, 204, 131, 85, 174, 190, 57, 50, 48, 81, 210, 199, 215, 165, 97, 109, 102, 134, 166, 121, 113, 197, 213, 163, 166, 208, 200, 153, 170, 209, 178, 146, 173, 207, 134, 85, 170, 201, 195, 192, 145, 141, 92, 109, 144, 164, 255, 194, 135, 142, 138, 141, 139, 139, 139, 140, 140, 138, 140, 139, 141, 136, 155, 195, 165, 134, 136, 135, 136, 135, 135, 135, 136, 135, 135, 141, 191, 152, 76, 104, 139, 114, 77, 139, 199, 150, 136, 138, 135, 138, 138, 136, 136, 136, 136, 138, 135, 140, 116, 80, 123, 140, 140, 140, 141, 139, 139, 141, 139, 138, 140, 138, 141, 138, 138, 138, 139, 139, 138, 136, 139, 100, 87, 136, 139, 142, 138, 141, 139, 141, 136, 141, 115, 81, 124, 200, 168, 138, 138, 136, 138, 136, 136, 136, 135, 136, 134, 135, 135, 134, 134, 134, 133, 134, 134, 133, 132, 133, 132, 133, 131, 132, 132, 134, 174, 181, 139, 125, 126, 125, 126, 126, 124, 128, 114, 71, 92, 131, 128, 129, 129, 126, 130, 128, 128, 129, 128, 128, 128, 126, 129, 125, 126, 128, 126, 128, 126, 124, 126, 126, 125, 125, 126, 124, 126, 124, 125, 123, 148, 181, 143, 120, 121, 120, 122, 120, 121, 119, 120, 120, 120, 121, 120, 119, 121
};


unsigned int sampleStarts[] = {
   0x0,
   0x621,
   0x6B4,
   0x72B,
   0xB31,
   0xF5D,
   0x1351,
   0x16AA,
   0x1834,
   0x1979,
   0x242C,
   0x2848,
   0x29B7,
   0x9999,
   0xAAAA,
   0xBBBB,
   0xCCCC,
   0xDDDD,
   0xEEEE
};





//////////////////////////////////////////
//  SETUP AND LOOP
//////////////////////////////////////////


void setup() {

   pinMode(ledPin, OUTPUT);
   pinMode(audioOne, OUTPUT);
   pinMode(audioTwo, OUTPUT);
   pinMode(audioThree, OUTPUT);
   pinMode(audioFour, OUTPUT);
   pinMode(A14, OUTPUT);
   analogWriteResolution(8);
   analogWriteFrequency(audioOne, 4000); // Sets ch1 PWM carrier to 4kHz
   usbMIDI.setHandleNoteOff(OnNoteOff);
   usbMIDI.setHandleNoteOn(OnNoteOn) ;
   usbMIDI.setHandleControlChange(OnControlChange) ;
   usbMIDI.setHandlePitchChange(OnPitchChange);

   
  
   // STARTUP SOUND ACROSS audioThree, audioFour, audioOne, audioTwo
   digitalWriteFast(ledPin, HIGH);
   tone(audioThree, 440/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioThree, 880/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   digitalWriteFast(ledPin, HIGH);
   tone(audioThree, 2217.5/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioThree, 2637/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   digitalWriteFast(ledPin, HIGH);
   tone(audioThree, 2217.5/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioThree, 880/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   digitalWriteFast(ledPin, HIGH);
   tone(audioThree, 440/4);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   noTone(audioThree);
   
   digitalWriteFast(ledPin, HIGH);
   tone(audioFour, 440/2);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   digitalWriteFast(ledPin, HIGH);
   tone(audioFour, 880/2);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioFour, 2217.5/2);
   delay(24);
   digitalWriteFast(ledPin, HIGH);
   tone(audioFour, 2637/2);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioFour, 2217.5/2);
   delay(24);
   digitalWriteFast(ledPin, HIGH);
   tone(audioFour, 880/2);
   delay(6);
   digitalWriteFast(ledPin, LOW);
   delay(18);
   tone(audioFour, 440/2);
   delay(24);
   digitalWriteFast(ledPin, HIGH);
   noTone(audioFour);   
   // audioOne fade in sound.
   for (int i=0; i <= 128; i++){
   analogWrite(audioOne, i);
   digitalWriteFast(ledPin, HIGH);
   delayMicroseconds(500000/110);
   analogWrite(audioOne, LOW);
   digitalWriteFast(ledPin, LOW);
   delayMicroseconds(500000/110);
   }
   
   // audioTwo fade out sound one octave lower.
   analogWriteFrequency(audioTwo, 1000);
   for (int i=128; i >= 0; i=i-2){
   analogWrite(audioTwo, i);
   digitalWriteFast(ledPin, HIGH);
   delayMicroseconds(500000/55);
   analogWrite(audioTwo, LOW);
   digitalWriteFast(ledPin, LOW);
   delayMicroseconds(500000/55);
   }
   analogWriteFrequency(audioOne, 4000);
   analogWriteFrequency(audioTwo, 4000);
   delay(1000); 
}





void loop() {

// Look for a MIDI message off of the USB, and execute callback
// functions, handled to OnNoteOn, OnNoteOff, and OnControlChange

   usbMIDI.read();
  
// In run mode, the Oscillators continue producing the value in their
// stored insidePitchInMicros variable, or insideTargetPitchInMicros
// and insidePitchInMicros if a portamento is being performed.  
// That is then factored against insideBendFactor and vibFactor,
// which can be changed through callbacks from usbMIDI.read();
// The oscillators simply wait until the time that they are supposed
// to change state, so they should be called as often as possible.

// In run mode, the Arpeggiators (if enabled through CC4) look to
// see if more than one note is being held at once, and if so, send
// messages to its respective oscillator that change the played note
// every 25ms.  This should also be called very often, but in reality
// doesn't need to be called as often as the Oscillators.

// ledFlash merely looks to see if the current time has exceeded the
// assigned time to shut off the LED (if it's already on.)

   ch1_Arpeggiator(1,0);
   ch1_Oscillator(1,0,0,0,0);
   ch2_Arpeggiator(1,0);
   ch2_Oscillator(1,0,0,0,0);
   ch3_Arpeggiator(1,0);
   ch3_Oscillator(1,0,0,0,0);
   ch4_Arpeggiator(1,0);
   ch4_Oscillator(1,0,0,0,0);
   mainSampleEngine(1,0,0,0);
   mainWaveformEngine(1,0,0,0,0);
   waveform_Arpeggiator(1,0);
   ledFlash(1);

}



//////////////////////////////////////////
//  MISC FUNCTIONS
//////////////////////////////////////////


void ledFlash(boolean dataType) {

   static unsigned long currentMillis; 
   static boolean ledOn = LOW;
   static unsigned long ledTurnOffTime; 
   static unsigned int ledOnLength = 10;

   switch (dataType){
      case 1: // If the LED is scheduled to turn off, turn it off.
         if (ledOn == HIGH){
            currentMillis = millis();
            if (currentMillis >= ledTurnOffTime){
               digitalWrite(ledPin, LOW);
            }
         }
      break;

      case 2: // Turn the LED on and set the time it is scheduled to turn off.
         digitalWrite(ledPin,HIGH);
         ledOn = HIGH;
         currentMillis = millis();
         ledTurnOffTime = currentMillis + ledOnLength;
      break;
	}
}





//////////////////////////////////////////
//  MIDI CALLBACK FUNCTIONS
//////////////////////////////////////////


void OnNoteOn (byte channel, byte note, byte velocity) {

// This is sometimes a callback from usbMIDI.read and sometimes
// being called from either Oscillator dataType 3 (note off) (if
// legato is active) or Arpeggiator dataType 4 (turning off the 
// arpeggiator while it is running and handing a note over to the 
// normal control and oscillation mechanisms.

// As much of the processing as possible is done here, only at
// the onset of notes.  The oscillators are fed half the period
// of the desired frequency (the amount of time inbetween state
// changes.)


   float pitchInFrequency;
   float pitchInMicros;

   // Sets all notes as an offset of A4 (#69)
   int noteNumberAfterOffset = (note - 69); 

   // Multiplies the base frequency by a coefficient that will 
   // say how many 12th roots of 2 away the note is from 440 Hz (A4/#69).
   pitchInFrequency = (tuningPitch * pow(2,((float)noteNumberAfterOffset/12)));
   
   if (note > 0){
      switch (channel) {
         case 1: 
            pitchInMicros = 500000.0 / pitchInFrequency;
            ch1_Oscillator(2, note, pitchInMicros, 0, 0);
            ch1_Arpeggiator(2,note);
         break;
        
         case 2:
            pitchInMicros = 500000.0 / pitchInFrequency;
            ch2_Oscillator(2, note, pitchInMicros, 0, 0);
            ch2_Arpeggiator(2,note);
         break;
        
         case 3:
            pitchInMicros = 500000.0 / pitchInFrequency;
            ch3_Oscillator(2, note, pitchInMicros, 0, 0);
            ch3_Arpeggiator(2,note);
         break;
        
         case 4:
            pitchInMicros = 500000.0 / pitchInFrequency;
            ch4_Oscillator(2, note, pitchInMicros, 0, 0);
            ch4_Arpeggiator(2,note);
         break;

         case 5:
            mainSampleEngine(2,note,velocity,0);
         break;

         case 6:
            pitchInMicros = 500000.0 / pitchInFrequency;
            mainWaveformEngine(2,note,pitchInMicros,0,0);
            waveform_Arpeggiator(2,note);
         break;
      }
  
      ledFlash(2);
   }
}




void OnNoteOff(byte channel, byte note, byte velocity) {
// Both the oscillator and the arpeggiator get the note off signal.

   if (note > 0){
      switch (channel) {
         case 1: 
            ch1_Oscillator(3, note, 0, 0, 0);
            ch1_Arpeggiator(3, note);
         break;
         case 2: 
            ch2_Oscillator(3, note, 0, 0, 0);
            ch2_Arpeggiator(3, note);
         break;
         case 3: 
            ch3_Oscillator(3, note, 0, 0, 0);
            ch3_Arpeggiator(3, note);
         break;
         case 4: 
            ch4_Oscillator(3, note, 0, 0, 0);
            ch4_Arpeggiator(3, note);
         break;
         case 5: 
            mainSampleEngine(3,note,velocity,0);
         break;
         case 6: 
            mainWaveformEngine(3,note,0,0,0);
            waveform_Arpeggiator(3, note);
         break;
      }
   }
}




void OnControlChange(byte channel, byte control, byte value) {
// This is for MIDI CC signals.  The CC number itself can be
// reassigned by changing the first set of case numbers.  (The
// second just routes the proper channels.)


   switch(control) {
      case 1: 
      // Mod wheel, which controls different things for different oscillators.
         switch (channel){
            case 1: ch1_Oscillator(5, 0, 0, 0, value);
            break;          
            case 2: ch2_Oscillator(5, 0, 0, 0, value);
            break;
            case 3: ch3_Oscillator(5, 0, 0, 0, value);
            break;
            case 4: ch4_Oscillator(5, 0, 0, 0, value);
            break;
            case 5: mainSampleEngine(5, value, 0, 0);
            break;
            case 6: mainWaveformEngine(5, 0, 0, 0, value);
            break;
         }
      break;
      
      case 2: bendRange = map(value, 0, 127, 1, 12); 
      // CC2 sets the global bend range between 1 and 12.
      break;
      
      case 3: 
      // CC3, which controls different things for different oscillators, 
      // type of vibrato on channel 2.
         switch (channel){
            case 1: ch1_Oscillator(7, 0, 0, 0, value);
            break;
            case 2: ch2_Oscillator(7, 0, 0, 0, value);
            break;
            case 3: ch3_Oscillator(7, 0, 0, 0, value);
            break;
            case 4: ch4_Oscillator(7, 0, 0, 0, value);
            break;
            case 6: mainWaveformEngine(7, 0, 0, 0, value);
            break;
         }
      break;
   
      case 4: // CC4, which turns on the Arpeggiator for that channel.
         switch (channel){
            case 1: ch1_Arpeggiator(4, value);
            break;
            case 2: ch2_Arpeggiator(4, value);
            break;
            case 3: ch3_Arpeggiator(4, value);
            break;
            case 4: ch4_Arpeggiator(4, value);
            break;
            case 6: waveform_Arpeggiator(4, value);
            break;
         } 
      break;

      case 5: // CC5, which controls the Arpeggiator Speed.
         switch (channel){
            case 1: ch1_Arpeggiator(10, value);
            break;
            case 2: ch2_Arpeggiator(10, value);
            break;
            case 3: ch3_Arpeggiator(10, value);
            break;
            case 4: ch4_Arpeggiator(10, value);
            break;
            case 6: waveform_Arpeggiator(10, value);
            break;
         }
      break;

      case 6: 
      // CC6, which controls the polypulse on channel 2, 
      // and PWM Follower on channel 1.
         switch (channel){
            case 1: ch1_Oscillator(9, 0, 0, 0, value);
            break;
            case 2: ch2_Oscillator(9, 0, 0, 0, value);
            break;
            case 3: ch3_Oscillator(9, 0, 0, 0, value);
            break;
            case 4: ch4_Oscillator(9, 0, 0, 0, value);
            break;
            case 6: mainWaveformEngine(9, 0, 0, 0, value);
            break;
         }
      break;

      case 20: //CC20, which controls the portamento speed.
         switch (channel){
            case 1: ch1_Oscillator(12, 0, 0, 0, value);
            break;
            case 2: ch2_Oscillator(12, 0, 0, 0, value);
            break;
            case 3: ch3_Oscillator(12, 0, 0, 0, value);
            break;
            case 4: ch4_Oscillator(12, 0, 0, 0, value);
            break;
            case 6: mainWaveformEngine(12, 0, 0, 0, value);
            break;
         }
      break;
   }
   
   ledFlash(2);
}




void OnPitchChange(byte channel, int pitch) {
   float bendRangeInCoefficient;
   float bendFactor;
   bendRangeInCoefficient = (pow(2,((float)bendRange/12)));
   bendFactor = 1.0 / pow(bendRangeInCoefficient,(((float)pitch/8192.0)-1.0));
   switch (channel){
      case 1: ch1_Oscillator(4, 0, 0, bendFactor, 0);
      break;
      case 2: ch2_Oscillator(4, 0, 0, bendFactor, 0);
      break;
      case 3: ch3_Oscillator(4, 0, 0, bendFactor, 0);
      break;
      case 4: ch4_Oscillator(4, 0, 0, bendFactor, 0);
      break;
      case 5: mainSampleEngine(4, 0, 0, pitch);
      break;
      case 6: mainWaveformEngine(4, 0, 0, bendFactor, 0);
      break;
   }
  
   ledFlash(2);
}
  




//////////////////////////////////////////
//  OSCILLATOR FUNCTIONS
//////////////////////////////////////////
  
  
// CHANNEL 1: PWM OSCILLATOR 1  
int ch1_Oscillator(byte dataType, byte outsideMidiNoteNumber, 
   float outsidePitchInMicros, float outsideBendFactor, byte outsideCC) {

   static boolean insideRun = LOW;
   static byte insideMidiNoteNumber = 0;
   static unsigned long insidePitchInMicros = 0;
   static unsigned long insidePitchInMicrosAfterBendFactor = 0;
   static float insideBendFactor = 1.0;
   static byte insideCC1 = 64;
   static byte insideCC3 = 0;
   static byte insideCC5 = 0;
   static boolean insideHigh = 0;
   static unsigned long insidePreviousMicros = 0;
   unsigned long currentMicros;
   static byte insidePreviousMidiNoteNumber;
   static boolean portamentoRunning;
   static boolean portamentoDirection;
   static float portamentoSpeed = 1.0;
   static float portamentoSpeedInMicros = 100.0 / (float)portamentoSpeed;
   static unsigned long previousPortamentoChange;
   static unsigned long insidePreviousPitchInMicros = 0;
   static unsigned long insideTargetPitchInMicros = 0;
   static unsigned long insidePreviousDecayMicros = 0;
   static boolean insideDecay = LOW;
   static unsigned int insideDecayInterval;
   static byte heldNoteNumberArray[16];
   static unsigned long heldNoteNumberDurationMillis[16];
   static byte j = 0;
   static boolean blankSlotFound = LOW;
   static unsigned long newestNoteDuration = 0;
   static byte highestNoteNumber = 0;
   static byte newestNote = 0;
   static float portamentoSpeedConstant = 0.0018;
   static float insidePitchInFrequencyAfterBendFactor;
   static boolean pwmFollowerOn = LOW;
   static unsigned long insidePreviousPwmFollowerMicros;
   static unsigned long pwmFollowerInterval = 50000;
   unsigned long elapsedTimeInMicros;
   float portamentoStepInMicros;
  
   switch(dataType){
      // Run Current Oscillator Settings
      case 1:  
         if (insideRun == HIGH){
                  
            currentMicros = micros();
            // If it's time to decrease the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.

            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
               (portamentoDirection == LOW) && 
               ((currentMicros - previousPortamentoChange) >= 
               (float)portamentoSpeedInMicros)) {

               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
               if (portamentoStepInMicros < 1.0){
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros + 
                  portamentoStepInMicros;
               previousPortamentoChange = micros();
              
               insidePitchInMicrosAfterBendFactor = 
                  ((float)insidePitchInMicros * (float)insideBendFactor);
              
               if (insidePitchInMicros >= insideTargetPitchInMicros){
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
               }
            }
            // If it's time to increase the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.

            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
                  (portamentoDirection == HIGH) && 
                  ((currentMicros - previousPortamentoChange) >= 
                  (float)portamentoSpeedInMicros)) {

               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
               if (portamentoStepInMicros < 1.0){
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros - 
                  portamentoStepInMicros;
               previousPortamentoChange = micros();
               
               insidePitchInMicrosAfterBendFactor = 
                  ((float)insidePitchInMicros * (float)insideBendFactor);
               
               if (insidePitchInMicros <= insideTargetPitchInMicros){
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
               }
            }
            
            
            if ((portamentoRunning == HIGH) && (insideDecay == HIGH)){
               insidePitchInMicros = insideTargetPitchInMicros;
               portamentoRunning = LOW;
              
               insidePitchInMicrosAfterBendFactor = 
                  ((float)insidePitchInMicros * (float)insideBendFactor);
            }
            
            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - insidePreviousMicros;
            if (elapsedTimeInMicros >= insidePitchInMicrosAfterBendFactor){
               analogWrite(audioOne, (insideHigh == LOW) ? 
                  (insideCC1 * 2) : LOW);
               insideHigh = ~insideHigh;
               insidePreviousMicros = micros();
            }
            
            currentMicros = micros();
            
            if (((currentMicros - insidePreviousPwmFollowerMicros) >= 
               pwmFollowerInterval) && (insideCC1 > 1)) {
               
               if (pwmFollowerOn == HIGH){
                  insidePitchInFrequencyAfterBendFactor = 
                     (2000000.0/(float)insidePitchInMicrosAfterBendFactor);
                  analogWriteFrequency(audioOne, 
                     insidePitchInFrequencyAfterBendFactor);
                  insidePreviousPwmFollowerMicros = micros();
               }
            }
            
            currentMicros = micros();
            
            if ( ((currentMicros - insidePreviousDecayMicros) >= 
               insideDecayInterval) && (insideDecay == HIGH) && 
               (insideCC1 > 0)) {

               insideCC1--;
               insidePreviousDecayMicros = micros();
              
               insidePitchInMicrosAfterBendFactor = 
                  ((float)insidePitchInMicros * (float)insideBendFactor);
            }
         
         return insideMidiNoteNumber;  
         }
         
         if (insideRun == LOW){
            return 0;
         }
             
      break;

      // Note On
      case 2: 
         if ((insideRun == LOW) && (outsideMidiNoteNumber > 0) && 
            (ch1_Arpeggiator(5,0) == LOW)) {
            
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
           
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) == 
               LOW){
               
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW){
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)){
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
         }
         
         if ((ch1_Arpeggiator(5,0) == HIGH) && (outsideMidiNoteNumber > 0)) {
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
         }
         
         if ((insideRun == HIGH) && (ch1_Arpeggiator(5,0) == LOW) && 
            (outsideMidiNoteNumber > 0)) {
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) == 
               LOW) {

               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW){
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)){
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++) {
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                  newestNote = heldNoteNumberArray[j];
               }
            }
            insidePreviousMidiNoteNumber = insideMidiNoteNumber;
            insideMidiNoteNumber = heldNoteNumberArray[j];
            insidePreviousPitchInMicros = insidePitchInMicros;
            insideTargetPitchInMicros = outsidePitchInMicros;
            portamentoRunning = HIGH;
            insideRun = HIGH;
         }
              
              
         if (insideDecay == HIGH){
            insideCC1 = 64;
         }
              
         if (portamentoRunning == HIGH) {
            if (insidePreviousPitchInMicros < insideTargetPitchInMicros) {
               portamentoDirection = LOW; 
               //Going down in pitch.  insidePitchInMicros will grow.
            }
            else {
               portamentoDirection = HIGH; 
               //Going up in pitch.  insidePitchInMicros will shrink.
            }
         }

         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
         ch1_Arpeggiator(9,0);
      
      break;

      // Note Off
      case 3: 
         if (outsideMidiNoteNumber > 0) {
            j = 0;
            highestNoteNumber = 0;
            for (j = 0; j < 16; j++) {
               if (heldNoteNumberArray[j] == outsideMidiNoteNumber) {
                  heldNoteNumberDurationMillis[j] = 0;
                  heldNoteNumberArray[j] = 0;
               }
               if (heldNoteNumberArray[j] > 0) {
                  highestNoteNumber = heldNoteNumberArray[j];
               }  
            }
            if (highestNoteNumber == 0) {
               insideRun = LOW;
               analogWrite(audioOne, LOW);
               insidePreviousMidiNoteNumber = 0;
            }
            else if (insideDecay == LOW) {
               j = 0;
               newestNoteDuration = 0;
               for (j = 0; j < 16; j++) {
                  if ((heldNoteNumberDurationMillis[j] > newestNoteDuration) &&
                     (insideDecay == LOW)) {
	        
                     newestNote = heldNoteNumberArray[j];
                  }
               }
            
               if ((ch1_Arpeggiator(5,0) == LOW) || ((ch1_Arpeggiator(5,0) == 
                  HIGH) && (ch1_Arpeggiator(7,0) == HIGH) && 
                  (ch1_Arpeggiator(8,0) == LOW))) {

                  OnNoteOn(1,newestNote,127);
               }
            }
          
            insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
               (float)insideBendFactor);
            ch1_Arpeggiator(9,
               testArrayContentsForTwoNotesOrMore(heldNoteNumberArray));
         }
      break;
      
      // Pitch Bend
      case 4: 
         insideBendFactor = outsideBendFactor;
         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
                
      break;
      // CC 1 Change
      case 5: 
         insideCC1 = outsideCC;
         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
                
      break;
      
      // CC 2 Change
      case 6:
         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
      break;
      
      // CC 3 Change
      case 7: 
         insideCC3 = outsideCC;
         if (insideCC3 > 0) {
            insideDecay = HIGH;
            insideDecayInterval = map(insideCC3,0,127,10000,1000);
         }
         else {
            insideDecay = LOW;
            insideCC1 = 64;
         }

         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
      break;
      
      // CC 4 Change
      case 8:
      break;
      
      // CC 6 Change
      case 9:
         insideCC5 = outsideCC;

         if (insideCC5 > 0) {
            pwmFollowerOn = HIGH;
         }
         else {
            pwmFollowerOn = LOW;
            analogWriteFrequency(audioOne,4000);
         }
        
         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
      break;
      
      // Returns newest note to Arpeggiator when it turns off.
      case 10:
         j = 0;
         newestNoteDuration = 0;
         for (j = 0; j < 16; j++) {
            if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               newestNoteDuration = heldNoteNumberDurationMillis[j];
            }      
         }
        
         insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros * 
            (float)insideBendFactor);
        
         return newestNote;
      
      break;
      
      case 11:
         return insideDecay;
      break;

      case 12:
         portamentoSpeedInMicros = map(outsideCC,0,127,20,2000);
      break;
      
           
   }
}






// CHANNEL 2: SQUARE/POLYPULSE OSCILLATOR WITH VIBRATO
int ch2_Oscillator(byte dataType, byte outsideMidiNoteNumber, 
   float outsidePitchInMicros, float outsideBendFactor, byte outsideCC) {

   static boolean insideRun = LOW;
   static byte insideMidiNoteNumber = 0;
   static unsigned long insidePitchInMicros = 0;
   static unsigned long insidePitchInMicrosAfterBendFactor = 0;
   static float insideBendFactor = 1.0;
   static byte insideCC1 = 0;
   static byte insideCC3 = 0;
   static byte insideCC5 = 0;
   static boolean insideHigh = LOW;
   static unsigned long insidePreviousMicros = 0;
   unsigned long currentMicros;
   static byte insidePreviousMidiNoteNumber;
   static boolean portamentoRunning;
   static boolean portamentoDirection;
   static float portamentoSpeed = 1.0;
   static float portamentoSpeedInMicros = 100.0 / (float)portamentoSpeed;
   static unsigned long previousPortamentoChange;
   static unsigned long insidePreviousPitchInMicros = 0;
   static unsigned long insideTargetPitchInMicros = 0;
   static boolean insidePitfall = LOW;
   static int insidePitfallPosition = 0;
   // static int insidePitfallWaveform = B0011101111100110;
   static int insidePitfallWaveform = 0x3BE6;
   static unsigned long insidePitchInMicros2 = 0;
   static byte heldNoteNumberArray[16];
   static unsigned long heldNoteNumberDurationMillis[16];
   static byte j = 0;
   static boolean blankSlotFound = LOW;
   static unsigned long newestNoteDuration = 0;
   static byte highestNoteNumber = 0;
   static byte newestNote = 0;
   static float portamentoSpeedConstant = 0.0018;
   unsigned long currentMillis;
   unsigned long elapsedTimeInMicros;
   
   static float pitfallTuningOffset = 0.87; 
   //Lower the number means lower the pitch of the pitfall polypulse sound.
   
   float portamentoStepInMicros;
              
              
   // Vibrato variables
   static unsigned long previousVibCountMicros = 0;
   static int vibCount = 0;
   static boolean vibDirection = 0; //0 counts up, 1 counts down
   static int vibAmount = 0;
   static float vibAmount2 = 0.0;
   static float vibFactor = 1.0;
   static int modWheelFactor = 0;
   static float finalFrequency = 0;
   unsigned long currentVibCountMicros;
   
   static unsigned long sineVibSpeedStepsInMicros = 2000; 
   // Resolution of the sine vibrato.  (Calculates every x microseconds)
   
   static byte vibWaveform = 1;   
   // 0 is triangle vibrato.  1 is sine vibrato.
   
   static unsigned long triangleVibSpeedStepsInMicros = 320; 
   // Reciprocal of Vib Speed for Triangle Vibrato 
   // (smaller number means faster)
   
   static float vibRateDivisor = 23.0;

   switch(dataType){
      // Run Current Oscillator Settings
      case 1:  
         if (insideRun == HIGH) {
        
            // TRIANGLE VIBRATO - creating vibAmount
            if (vibWaveform == 0){
               if (insideCC1 > 0){
                  if (vibCount <= 0) { // Set direction of count
                     vibDirection = 0; 
                  }
                  if (vibCount >= 200) {
                     vibDirection = 1; 
                  }
                
                  currentVibCountMicros = micros();
              
                  if ((vibDirection == 0) && ((currentVibCountMicros - 
                     previousVibCountMicros) >= ( 
                     (float)triangleVibSpeedStepsInMicros 
                     / (float)vibRateFactor))) {

                     vibCount ++; 
                     // If the proper amount of microseconds have passed 
                     // and we're counting up, count up one.

                     previousVibCountMicros = micros(); 
                     // Set the current time for reference the next time.
                  }
              
                  if ((vibDirection == 1) && ((currentVibCountMicros - 
                     previousVibCountMicros) >= ( 
                     (float)triangleVibSpeedStepsInMicros / 
                     (float)vibRateFactor))) {
                     
                     vibCount --; 
                     // If the proper amount of microseconds have passed 
                     // and we're counting down, count down one.
                     
                     previousVibCountMicros = micros(); 
                     // Set the current time for reference the next time.
                  }
              
                  vibAmount = map(vibCount, 0, 200, -100, 100);
                  
                  vibAmount2 = (float)vibAmount * vibDepth; 
                  //Scales vibAmount to very small positive or negative amounts
                  
                  modWheelFactor = map(insideCC1, 0, 127, 0, 2000);
                  vibFactor = 1.0 + (vibAmount2 * ((float)modWheelFactor/1000));
                
                  insidePitchInMicrosAfterBendFactor = 
                     calculateInsidePitchInMicrosAfterBendFactorCh2(
                        insidePitchInMicros, insideBendFactor, vibFactor, 
                        insidePitfall, pitfallTuningOffset);
              
               }
                
               else { // Squelch IEEE 754 math errors.
                  vibFactor = 1.0;
               }
               
            }
              
              // SINE VIBRATO - creating vibAmount
            if (vibWaveform == 1) {
               if (insideCC1 > 0) { 
                  currentVibCountMicros = micros();
                  if  ((currentVibCountMicros - previousVibCountMicros) >= 
                     sineVibSpeedStepsInMicros) { 
                     // Limits how often the chip can calculate the sine function.

                     currentMillis = millis();
                     vibAmount = sin(((float)currentMillis * 
                        (float)vibRateFactor) / (float)vibRateDivisor) * 100.0;
                        //range of  1 to -1, sclaed to time, 
                        // factored to 100 to -100
   
                     vibAmount2 = (float)vibAmount * vibDepth; 
                        //Scales vibAmount to very small positive or 
                        // negative amounts
   
                     modWheelFactor = map(insideCC1, 0, 127, 0, 2000);
                     vibFactor = 1.0 + (vibAmount2 * 
                        ((float)modWheelFactor/1000));
                  
                     insidePitchInMicrosAfterBendFactor = 
                        calculateInsidePitchInMicrosAfterBendFactorCh2(
                           insidePitchInMicros, insideBendFactor, 
                           vibFactor, insidePitfall, pitfallTuningOffset);
               
                     previousVibCountMicros = micros();
                  }
               }
                                                        
               else { // Squelch IEEE 754 math errors.
                  vibFactor = 1.0;
               }
            }
              
              
            
            // Oscillator guts
                  
            currentMicros = micros(); 
            
            // If it's time to decrease the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.
            if ((portamentoRunning == HIGH) && (portamentoDirection == LOW) && 
               ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {
               
               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros + 
               portamentoStepInMicros;
               previousPortamentoChange = micros();
                      
               insidePitchInMicrosAfterBendFactor = 
                  calculateInsidePitchInMicrosAfterBendFactorCh2( 
                  insidePitchInMicros, insideBendFactor, vibFactor, 
                  insidePitfall, pitfallTuningOffset);
                
               if (insidePitchInMicros >= insideTargetPitchInMicros){
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
                        
                  insidePitchInMicrosAfterBendFactor = 
                     calculateInsidePitchInMicrosAfterBendFactorCh2( 
                     insidePitchInMicros, insideBendFactor, vibFactor, 
                     insidePitfall, pitfallTuningOffset);
                        
               }
            }
                  
            // If it's time to increase the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is higher 
            // than 500 Hz, slow the portamento down.  If the pitch is lower 
            // than 500 Hz, speed the portamento up.

            if ((portamentoRunning == HIGH) && (portamentoDirection == HIGH) && 
               ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {

	            portamentoStepInMicros = (portamentoSpeedConstant / (1.0 / 
                  (float)insidePitchInMicros));
                    
                  if (portamentoStepInMicros < 1.0) {
                     portamentoStepInMicros = 1;
                  }
                  
                  insidePitchInMicros = insidePitchInMicros - 
                     portamentoStepInMicros;
                  previousPortamentoChange = micros();

                  insidePitchInMicrosAfterBendFactor = 
                     calculateInsidePitchInMicrosAfterBendFactorCh2( 
                     insidePitchInMicros, insideBendFactor, vibFactor, 
                     insidePitfall, pitfallTuningOffset);
                  
                  if (insidePitchInMicros <= insideTargetPitchInMicros) {
                     portamentoRunning = LOW;
                     insidePitchInMicros = insideTargetPitchInMicros;
                       
                       
                     insidePitchInMicrosAfterBendFactor = 
                        calculateInsidePitchInMicrosAfterBendFactorCh2( 
                        insidePitchInMicros, insideBendFactor, vibFactor, 
                        insidePitfall, pitfallTuningOffset);                         
              
                  }
            }
                  
                  
            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - insidePreviousMicros;
            if (elapsedTimeInMicros >= insidePitchInMicrosAfterBendFactor) {
               // digitalWrite(audioTwo, ~insideHigh);
               if (insideHigh == LOW) {
                  //PORTC |= (1<<3);
                  digitalWriteFast(audioTwo,HIGH);
               }
               else {
                  //PORTC &= ~(1<<3);
                  digitalWriteFast(audioTwo,LOW);
               }
                      
               if (insidePitfall == HIGH){
                  if ((bool(insidePitfallWaveform & (0x0001 << 
                     insidePitfallPosition))) == HIGH) {
                  
                     insideHigh = ~insideHigh;
                  }
                  insidePitfallPosition ++;
                  if (insidePitfallPosition >= 14){
                     insidePitfallPosition = 0;
                  }
               }
                    
               else {  
                  insideHigh = ~insideHigh;
               }
               insidePreviousMicros = micros(); 
            }
                  
                                   
            return insideMidiNoteNumber;  
         }
         
         if (insideRun == LOW){
            return 0;
         }

      break;
      

      // Note On
      case 2: 
      
         if ((insideRun == LOW) && (outsideMidiNoteNumber > 0) && 
            (ch2_Arpeggiator(5,0) == LOW)) {
            
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
                
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) ==
               LOW) {

               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
         }
              
         if ((ch2_Arpeggiator(5,0) == HIGH) && (outsideMidiNoteNumber > 0)) {
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
                
         }
              
         if ((insideRun == HIGH) && (ch2_Arpeggiator(5,0) == LOW) && 
            (outsideMidiNoteNumber > 0)) {
                
                
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) ==
               LOW) {
               
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
                
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++){
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                  newestNote = heldNoteNumberArray[j];
               }
            }
            insidePreviousMidiNoteNumber = insideMidiNoteNumber;
            insideMidiNoteNumber = heldNoteNumberArray[j];
            insidePreviousPitchInMicros = insidePitchInMicros;
            insideTargetPitchInMicros = outsidePitchInMicros;
            portamentoRunning = HIGH;
            insideRun = HIGH;
         }
              
         if (portamentoRunning == HIGH){
            if (insidePreviousPitchInMicros < insideTargetPitchInMicros) {
               portamentoDirection = LOW; 
               //Going down in pitch.  insidePitchInMicros will grow.
            }
            else {
               portamentoDirection = HIGH; 
               //Going up in pitch.  insidePitchInMicros will shrink.
            }
         }
              
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2( 
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
            
         ch2_Arpeggiator(9,0);
                                           
      break;


      // Note Off
      case 3:
         if (outsideMidiNoteNumber > 0){
         
            // If the arpeggiator is turned off OR there are two notes held 
            // down by the arpeggiator.
            j = 0;
            highestNoteNumber = 0;
            for (j = 0; j < 16; j++) {
               if (heldNoteNumberArray[j] == outsideMidiNoteNumber) {
                  heldNoteNumberDurationMillis[j] = 0;
                  heldNoteNumberArray[j] = 0;
               }
               if (heldNoteNumberArray[j] > 0) {
                  highestNoteNumber = heldNoteNumberArray[j];
               }  
            }
            if (highestNoteNumber == 0) {
               insideRun = LOW;
               digitalWriteFast(audioTwo, LOW);
               insidePreviousMidiNoteNumber = 0;
            }
         else {
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++) {
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               }
            }
            if ((ch2_Arpeggiator(5,0) == LOW) || ((ch2_Arpeggiator(5,0) == 
               HIGH) && (ch2_Arpeggiator(7,0) == HIGH) && 
               (ch2_Arpeggiator(8,0) == LOW))) {

               OnNoteOn(2,newestNote,127);
            }
         }
         
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2( 
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
         ch2_Arpeggiator(9,testArrayContentsForTwoNotesOrMore(
            heldNoteNumberArray));
         }
                   
      break;


      // Pitch Bend
      case 4: 
         insideBendFactor = outsideBendFactor;
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2( 
               insidePitchInMicros, insideBendFactor, vibFactor, 
               insidePitfall, pitfallTuningOffset);
      break;

      // CC 1 Change
      case 5: 
         insideCC1 = outsideCC;
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
                
      break;
      
      // CC 2 Change (Reserved for Bend Range)
      case 6:
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
      break;
      
      // CC 3 Change (vibrato type)
      case 7:
         insideCC3 = outsideCC;
         if (insideCC3 > 0) {
            vibWaveform = 1;
         }
         else {
            vibWaveform = 0;
         }
        
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
              
      break;
      
      // CC 4 Change (Reserved for Arpeggiator On)
      case 8:
      break;
      
      // CC 6 Change (Polypulse Activate)
      case 9: 
         insideCC5 = outsideCC;
         if (insideCC5 > 0) {
            insidePitfall = HIGH;
         }
         else {
            insidePitfall = LOW;
         }
        
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
        
      break;
      
      // Returns newest note to Arpeggiator when it turns off.
      case 10:
         j = 0;
         newestNoteDuration = 0;
         for (j = 0; j < 16; j++) {
            if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               newestNoteDuration = heldNoteNumberDurationMillis[j];
            }      
         }
        
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 
            insidePitfall, pitfallTuningOffset);
              
         return newestNote;
      break;
      
      case 11: //Returns insideDecay on other three oscillators
         return LOW;
      break;

      case 12:
         portamentoSpeedInMicros = map(outsideCC,0,127,20,2000);
      break;
   }
}



// CHANNEL 3: 25% Pulse Nintendo Sound Oscillator
int ch3_Oscillator(byte dataType, byte outsideMidiNoteNumber, 
   float outsidePitchInMicros, float outsideBendFactor, byte outsideCC) {

   static boolean insideRun = LOW;
   static byte insideMidiNoteNumber = 0;
   static unsigned long insidePitchInMicros = 0;
   static unsigned long insidePitchInMicrosAfterBendFactor = 0;
   static float insideBendFactor = 1.0;
   static byte insideCC1 = 0;
   static byte insideCC3 = 0;
   static byte insideCC5 = 0;
   static boolean insideHigh = LOW;
   static unsigned long insidePreviousMicros = 0;
   unsigned long currentMicros;
   static byte dutyCycleOffFactor = 150;
   static byte dutyCycleOnFactor = 50;
   static byte insidePreviousMidiNoteNumber;
   static boolean portamentoRunning;
   static boolean portamentoDirection;
   static float portamentoSpeed = 1.0;
   static float portamentoSpeedInMicros = 100.0 / (float)portamentoSpeed;
   static unsigned long previousPortamentoChange;
   static unsigned long insidePreviousPitchInMicros = 0;
   static unsigned long insideTargetPitchInMicros = 0;
   static unsigned long insidePreviousDecayMicros = 0;
   static boolean insideDecay = LOW;
   static unsigned int insideDecayInterval;
   static byte heldNoteNumberArray[16];
   static unsigned long heldNoteNumberDurationMillis[16];
   static byte j = 0;
   static boolean blankSlotFound = LOW;
   static unsigned long newestNoteDuration = 0;
   static byte highestNoteNumber = 0;
   static byte newestNote = 0;
   static float portamentoSpeedConstant = 0.0018;
   static byte defaultDutyCycleOff = 150;
   static byte defaultDutyCycleOn = 50;
   unsigned long elapsedTimeInMicros;
   static unsigned long finalPitchInMicrosDutyOff;
   static unsigned long finalPitchInMicrosDutyOn;
   float portamentoStepInMicros;

  switch(dataType){
      // Run Current Oscillator Settings
      case 1:  
         if (insideRun == HIGH){
            // Oscillator guts
            currentMicros = micros();
                    
            // If it's time to decrease the pitch, do so, but 
            // scale it non-linearly so that the speed is always 
            // the same as if the shift is passing through 500 Hz. 
            // If the pitch is higher than 500 Hz, slow the portamento 
            // down.  If the pitch is lower than 500 Hz, speed the 
            // portamento up. 
            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
               (portamentoDirection == LOW) && 
               ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {
               
               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
                  
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros + 
                  portamentoStepInMicros;
               previousPortamentoChange = micros();
                   
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros
                  * (float)insideBendFactor);
               finalPitchInMicrosDutyOff = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOnFactor/100.0;
	             
               if (insidePitchInMicros >= 
                  insideTargetPitchInMicros) {
                     
                  portamentoRunning = LOW;
                  insidePitchInMicros = 
                     insideTargetPitchInMicros;
               }
            }

            // If it's time to increase the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.
            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
               (portamentoDirection == HIGH) && ((currentMicros - 
               previousPortamentoChange) >= portamentoSpeedInMicros)) {
	              portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
                    
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros - 
                  portamentoStepInMicros;
               previousPortamentoChange = micros(); 
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
                  (float)insideBendFactor);
               finalPitchInMicrosDutyOff = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOnFactor/100.0;
            
               if (insidePitchInMicros <= insideTargetPitchInMicros) {
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
               }
            }
               
               
            if ((portamentoRunning == HIGH) && (insideDecay == HIGH)) {
               insidePitchInMicros = insideTargetPitchInMicros;
               portamentoRunning = LOW;
                 
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
                  (float)insideBendFactor);
               finalPitchInMicrosDutyOff = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOnFactor/100.0;
            }
               
            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - insidePreviousMicros;
            if ((insideHigh == LOW) && (elapsedTimeInMicros >= 
               finalPitchInMicrosDutyOff) && (dutyCycleOffFactor < 200)) {
               
               digitalWriteFast(audioThree,HIGH);
               insideHigh = HIGH;
               insidePreviousMicros = micros(); 
            }
            else if ((insideHigh == HIGH) && (elapsedTimeInMicros >= 
               finalPitchInMicrosDutyOn) && (dutyCycleOffFactor < 200)) {
               
               digitalWriteFast(audioThree,LOW);
               insideHigh = LOW;
               insidePreviousMicros = micros(); 
            }
               
            currentMicros = micros();
            if ( ((currentMicros - (float)insidePreviousDecayMicros) >= 
               insideDecayInterval) && (insideDecay == HIGH) && 
               (dutyCycleOffFactor < 200) && (dutyCycleOnFactor > 0)) {
                 
               dutyCycleOffFactor ++;
               dutyCycleOnFactor --;
               insidePreviousDecayMicros = micros();
                 
               finalPitchInMicrosDutyOff = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = 
                  insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOnFactor/100.0;
            }
               
            return insideMidiNoteNumber;  
         }
            
         if (insideRun == LOW) {
            return 0;
         }
      break;

      // Note On
      case 2: 
         if ((insideRun == LOW) && (outsideMidiNoteNumber > 0) && 
            (ch3_Arpeggiator(5,0) == LOW)) {
                
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
            
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) ==
               LOW){
            
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
         }
              
         if ((ch3_Arpeggiator(5,0) == HIGH) && (outsideMidiNoteNumber > 0)) {
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
         }
              
         if ((insideRun == HIGH) && (ch3_Arpeggiator(5,0) == LOW) && 
            (outsideMidiNoteNumber > 0)) {
                
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) == 
               LOW) {
                
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
                
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++) {
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                  newestNote = heldNoteNumberArray[j];
               }
            }
            insidePreviousMidiNoteNumber = insideMidiNoteNumber;
            insideMidiNoteNumber = heldNoteNumberArray[j];
            insidePreviousPitchInMicros = insidePitchInMicros;
            insideTargetPitchInMicros = outsidePitchInMicros;
            portamentoRunning = HIGH;
            insideRun = HIGH;
         }
              
         if (insideDecay == HIGH) {
            insideCC1 = 0;
            dutyCycleOffFactor = 150;
            dutyCycleOnFactor = 50;
         }
              
         if (portamentoRunning == HIGH) {
            if (insidePreviousPitchInMicros < insideTargetPitchInMicros) {
               //Going down in pitch.  insidePitchInMicros will grow.
               portamentoDirection = LOW; 
            }
            else {
               portamentoDirection = HIGH; //Going up in pitch.  insidePitchInMicros will shrink.
            }
         }
              
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * (float)dutyCycleOnFactor/100.0;
         
         ch3_Arpeggiator(9,0);
      
      break;
      
      // Note Off
      case 3:
         if (outsideMidiNoteNumber > 0) {
            j = 0;
            highestNoteNumber = 0;
            for (j = 0; j < 16; j++) {
               if (heldNoteNumberArray[j] == outsideMidiNoteNumber) {
                  heldNoteNumberDurationMillis[j] = 0;
                  heldNoteNumberArray[j] = 0;
               }
               if (heldNoteNumberArray[j] > 0) {
                  highestNoteNumber = heldNoteNumberArray[j];
               }  
            }
            if (highestNoteNumber == 0) {
               insideRun = LOW;
               digitalWriteFast(audioThree, LOW);
               insidePreviousMidiNoteNumber = 0;
            }
            else if (insideDecay == LOW) {
               j = 0;
               newestNoteDuration = 0;
               for (j = 0; j < 16; j++) {
                  if ((heldNoteNumberDurationMillis[j] > newestNoteDuration) && 
                     (insideDecay == LOW)) {
                     
                     newestNote = heldNoteNumberArray[j];
                  }
               }
               
               if ((ch3_Arpeggiator(5,0) == LOW) || ((ch3_Arpeggiator(5,0) == 
                  HIGH) && (ch3_Arpeggiator(7,0) == HIGH) && 
                  (ch3_Arpeggiator(8,0) == LOW))) {
	     
                  OnNoteOn(3,newestNote,127);
               }
            }
          
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
          
         ch3_Arpeggiator(9,
            testArrayContentsForTwoNotesOrMore(heldNoteNumberArray));
         }
      break;

      // Pitch Bend
      case 4: 
         insideBendFactor = outsideBendFactor;
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      // CC 1 Change
      case 5: 
         insideCC1 = outsideCC;
         dutyCycleOffFactor = map(insideCC1, 0, 127, defaultDutyCycleOff, 200);
         dutyCycleOnFactor = map(insideCC1, 0, 127, defaultDutyCycleOn, 0);
              
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
       
      // CC 2 Change
      case 6:
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;

      // CC 3 Change
      case 7: insideCC3 = outsideCC;
         if (insideCC3 > 0){
            insideDecay = HIGH;
            insideDecayInterval = map(insideCC3,0,127,10000,500);
         }
         else {
            insideDecay = LOW;
            ch3_Oscillator(5,0,0,0,0);
         }
        
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      // CC 4 Change
      case 8:
      break;
      
      case 9: // CC 6 Change
         insideCC5 = outsideCC;
         defaultDutyCycleOff = map(insideCC5, 0, 127, 150, 100);
         defaultDutyCycleOn = map(insideCC5, 0, 127, 50, 100);
         dutyCycleOffFactor = map(insideCC1, 0, 127, defaultDutyCycleOff, 200);
         dutyCycleOnFactor = map(insideCC1, 0, 127, defaultDutyCycleOn, 0);
         
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      // Returns newest note to Arpeggiator when it turns off.
      case 10:
         j = 0;
         newestNoteDuration = 0;
         for (j = 0; j < 16; j++) {
            if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               newestNoteDuration = heldNoteNumberDurationMillis[j];
            }      
         }
        
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
              
         return newestNote;
      break;
      
      case 11:
         return insideDecay;
      break;

      case 12:
         portamentoSpeedInMicros = map(outsideCC,0,127,20,2000);
      break;
   }
}






// CHANNEL 4: 12.5% Pulse Nintendo Sound Oscillator
int ch4_Oscillator(byte dataType, byte outsideMidiNoteNumber, 
   float outsidePitchInMicros, float outsideBendFactor, byte outsideCC) {
   
   static boolean insideRun = LOW;
   static byte insideMidiNoteNumber = 0;
   static unsigned long insidePitchInMicros = 0;
   static unsigned long insidePitchInMicrosAfterBendFactor = 0;
   static float insideBendFactor = 1.0;
   static byte insideCC1 = 0;
   static byte insideCC3 = 0;
   static byte insideCC5 = 0;
   static boolean insideHigh = LOW;
   static unsigned long insidePreviousMicros = 0;
   unsigned long currentMicros;
   static byte dutyCycleOffFactor = 175;
   static byte dutyCycleOnFactor = 25;
   static byte insidePreviousMidiNoteNumber;
   static boolean portamentoRunning;
   static boolean portamentoDirection;
   static float portamentoSpeed = 1.0;
   static float portamentoSpeedInMicros = 100.0 / (float)portamentoSpeed;
   static unsigned long previousPortamentoChange;
   static unsigned long insidePreviousPitchInMicros = 0;
   static unsigned long insideTargetPitchInMicros = 0;
   static unsigned long insidePreviousDecayMicros = 0;
   static boolean insideDecay = LOW;
   static unsigned int insideDecayInterval;
   static byte heldNoteNumberArray[16];
   static unsigned long heldNoteNumberDurationMillis[16];
   static byte j = 0;
   static boolean blankSlotFound = LOW;
   static unsigned long newestNoteDuration = 0;
   static byte highestNoteNumber = 0;
   static byte newestNote = 0;
   static float portamentoSpeedConstant = 0.0018;
   static byte defaultDutyCycleOff = 175;
   static byte defaultDutyCycleOn = 25;
   unsigned long elapsedTimeInMicros;
   static unsigned long finalPitchInMicrosDutyOff;
   static unsigned long finalPitchInMicrosDutyOn;
   float portamentoStepInMicros;

   switch(dataType) {
      // Run Current Oscillator Settings
      case 1:  
         if (insideRun == HIGH) {
            // Oscillator guts
            currentMicros = micros();
            // If it's time to decrease the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is higher 
            // than 500 Hz, slow the portamento down.  If the pitch is lower 
            // than 500 Hz, speed the portamento up.
            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
               (portamentoDirection == LOW) && 
               ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {

	            portamentoStepInMicros = (portamentoSpeedConstant / (1.0 / 
                  (float)insidePitchInMicros));
               
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               
               insidePitchInMicros = insidePitchInMicros + 
                  portamentoStepInMicros;
               
               previousPortamentoChange = micros();
                     
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
                  (float)insideBendFactor);
               finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOnFactor/100.0;     
	             
                    
               if (insidePitchInMicros >= insideTargetPitchInMicros) {
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
               }
            }
            
            // If it's time to increase the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.

            if ((portamentoRunning == HIGH) && (insideDecay == LOW) && 
               (portamentoDirection == HIGH) && ((currentMicros - 
               previousPortamentoChange) >= portamentoSpeedInMicros)) {
	             
               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
                     
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               
               insidePitchInMicros = insidePitchInMicros - 
                  portamentoStepInMicros;
               
               previousPortamentoChange = micros();
                     
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
                  (float)insideBendFactor);
               finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOnFactor/100.0; 
	             
               if (insidePitchInMicros <= insideTargetPitchInMicros) {
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
               }
            }
                  
                  
            if ((portamentoRunning == HIGH) && (insideDecay == HIGH)) {
               insidePitchInMicros = insideTargetPitchInMicros;
               portamentoRunning = LOW;
                    
               insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
                  (float)insideBendFactor);
               finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
                  (float)dutyCycleOnFactor/100.0;
            }
                  
                  
            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - insidePreviousMicros;
            if ((insideHigh == LOW) && (elapsedTimeInMicros >= 
               finalPitchInMicrosDutyOff) && (dutyCycleOffFactor < 200)) {
               
               digitalWriteFast(audioFour, HIGH);
               insideHigh = HIGH;
               insidePreviousMicros = micros(); 
            }
                  
            else if ((insideHigh == HIGH) && (elapsedTimeInMicros >= 
               finalPitchInMicrosDutyOn) && (dutyCycleOffFactor < 200)) {
               
               digitalWriteFast(audioFour,LOW);
               insideHigh = LOW;
               insidePreviousMicros = micros(); 
            }
                  
            currentMicros = micros();
            if ( ((currentMicros - insidePreviousDecayMicros) >= 
               insideDecayInterval) && (insideDecay == HIGH) && 
               (dutyCycleOffFactor < 200) && (dutyCycleOnFactor > 0)) {

               dutyCycleOffFactor ++;
               dutyCycleOnFactor --;
               insidePreviousDecayMicros = micros();
                    
               finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOffFactor/100.0;
               finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor *
                  (float)dutyCycleOnFactor/100.0;
            }
            
            return insideMidiNoteNumber;  
         }
            
         if (insideRun == LOW) {
            return 0;
         }
      break;
      
      // Note On
      case 2: 
         if ((insideRun == LOW) && (outsideMidiNoteNumber > 0) && 
            (ch4_Arpeggiator(5,0) == LOW)) {
            
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
            
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) == 
               LOW) {
            
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
         }
              
         if ((ch4_Arpeggiator(5,0) == HIGH) && (outsideMidiNoteNumber > 0)) {
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
         }
              
         if ((insideRun == HIGH) && (ch4_Arpeggiator(5,0) == LOW) && 
            (outsideMidiNoteNumber > 0)) {
                
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) ==
               LOW) {
                
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
                
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++) {
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                  newestNote = heldNoteNumberArray[j];
               }
            }
            insidePreviousMidiNoteNumber = insideMidiNoteNumber;
            insideMidiNoteNumber = heldNoteNumberArray[j];
            insidePreviousPitchInMicros = insidePitchInMicros;
            insideTargetPitchInMicros = outsidePitchInMicros;
            portamentoRunning = HIGH;
            insideRun = HIGH;
         }
              
         if (insideDecay == HIGH) {
            insideCC1 = 0;
            dutyCycleOffFactor = 150;
            dutyCycleOnFactor = 50;
         }
              
         if (portamentoRunning == HIGH) {
            if (insidePreviousPitchInMicros < insideTargetPitchInMicros) {
               //Going down in pitch.  insidePitchInMicros will grow.
               portamentoDirection = LOW; 
            }
            else {
               //Going up in pitch.  insidePitchInMicros will shrink.
               portamentoDirection = HIGH; 
            }
         }
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
         
         ch4_Arpeggiator(9,0);
      
      break;
      
      // Note Off
      case 3:
         if (outsideMidiNoteNumber > 0) { 
            j = 0;
            highestNoteNumber = 0;
            for (j = 0; j < 16; j++) {
               if (heldNoteNumberArray[j] == outsideMidiNoteNumber) {
                  heldNoteNumberDurationMillis[j] = 0;
                  heldNoteNumberArray[j] = 0;
               }
               if (heldNoteNumberArray[j] > 0) {
                  highestNoteNumber = heldNoteNumberArray[j];
               }  
            }
            if (highestNoteNumber == 0) {
               insideRun = LOW;
               digitalWriteFast(audioFour, LOW);
               insidePreviousMidiNoteNumber = 0;
            }
            else if (insideDecay == LOW) {
               j = 0;
               newestNoteDuration = 0;
               for (j = 0; j < 16; j++) {
                  if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                     newestNote = heldNoteNumberArray[j];
                  }
               }
               if ((ch4_Arpeggiator(5,0) == LOW) || ((ch4_Arpeggiator(5,0) == 
                  HIGH) && (ch4_Arpeggiator(7,0) == HIGH) && 
                  (ch4_Arpeggiator(8,0) == LOW))) {
               
                  OnNoteOn(4,newestNote,127);
               }
            }
         }
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
         
         ch4_Arpeggiator(9,
            testArrayContentsForTwoNotesOrMore(heldNoteNumberArray));
      break;

      // Pitch Bend
      case 4: 
         insideBendFactor = outsideBendFactor;
                  // Oscillator guts
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;       
      break;
      
      // CC 1 Change
      case 5: 
         insideCC1 = outsideCC;
         dutyCycleOffFactor = map(insideCC1, 0, 127, defaultDutyCycleOff, 200);
         dutyCycleOnFactor = map(insideCC1, 0, 127, defaultDutyCycleOn, 0);
         
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;       
      break;
          
      // CC 2 Change
      case 6:
          insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
          finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
          finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;

      // CC 3 Change
      case 7: insideCC3 = outsideCC;
         if (insideCC3 > 0) {
            insideDecay = HIGH;
            insideDecayInterval = map(insideCC3,0,127,10000,500);
         }
         else {
            insideDecay = LOW;
            ch4_Oscillator(5,0,0,0,0);
         }
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      // CC 4 Change
      case 8:
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      case 9: // CC 6 Change
         insideCC5 = outsideCC;
         defaultDutyCycleOff = map(insideCC5, 0, 127, 175, 100);
         defaultDutyCycleOn = map(insideCC5, 0, 127, 25, 100);
         dutyCycleOffFactor = map(insideCC1, 0, 127, defaultDutyCycleOff, 200);
         dutyCycleOnFactor = map(insideCC1, 0, 127, defaultDutyCycleOn, 0);
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
      break;
      
      // Returns newest note to Arpeggiator when it turns off.
      case 10:
         j = 0;
         newestNoteDuration = 0;
         for (j = 0; j < 16; j++) {
            if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               newestNoteDuration = heldNoteNumberDurationMillis[j];
            }      
         }
         insidePitchInMicrosAfterBendFactor = (insidePitchInMicros * 
            (float)insideBendFactor);
         finalPitchInMicrosDutyOff = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOffFactor/100.0;
         finalPitchInMicrosDutyOn = insidePitchInMicrosAfterBendFactor * 
            (float)dutyCycleOnFactor/100.0;
         return newestNote;
      break;
      
      case 11:
         return insideDecay;
      break;

      case 12:
         portamentoSpeedInMicros = map(outsideCC,0,127,20,2000);
      break;
   }
}




void mainSampleEngine(byte dataType, byte noteNumber, byte noteVelocity, 
   long longData) {
   
   static boolean insideRun = LOW;
   static unsigned long sampleCounter = 0;
   static byte sampleCounterIncrement = 1;
   static unsigned long maxSampleCounter = 400;
   byte current8bitSampleLevel;
   static byte sampleNumber;
   static byte insideNoteNumber;
   unsigned long currentMicros;
   static unsigned long previousMicros;
   unsigned long elapsedTimeInMicros;
   static unsigned long sampleRateMicros = 63;
   static byte sampleIncrementRate = 1;

   switch (dataType) {
   
      case 1: // Run in main loop
         if (insideRun == HIGH) {
            if (sampleCounter >= maxSampleCounter) {
               sampleCounter = 0;
               insideRun = LOW;
            }
         }
     
         if (insideRun == HIGH) {
            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - previousMicros;
            if (elapsedTimeInMicros >= sampleRateMicros) {
               current8bitSampleLevel = pgm_read_byte_near(sampleData + 
                  (sampleStarts[sampleNumber]) + sampleCounter);
               analogWrite(A14,current8bitSampleLevel);
               sampleCounter = sampleCounter + sampleIncrementRate;
               previousMicros = micros();
            }
         }
      break;
   
      case 2: // Note On
         if ((insideRun == LOW) || (insideRun == HIGH)) {
            insideNoteNumber = noteNumber;
            if ((noteNumber >= 48) && (noteNumber <= 66)) {
               sampleNumber = noteNumber - 48;
       
               sampleCounter = 0;
               maxSampleCounter = sampleStarts[sampleNumber + 1] - 
                  sampleStarts[sampleNumber];
       
               insideRun = HIGH;
            }
         }
     
   break;
   
   case 3: // Note Off
      if (insideNoteNumber == noteNumber) {
         insideRun = LOW;
         analogWrite(A14,127);
      }
     
   break;
   
   case 4: // Pitch Bend
      if (longData == 8192) {
         sampleRateMicros = 60;
      }

      if (longData <= 8192) {
         sampleRateMicros = map(longData,0,8191,40,60);
      }
      if (longData >= 8193) {
         sampleRateMicros = map(longData,8193,16838,60,30);
      }

   break;
   
   case 5: // CC1 Change
      if (noteNumber > 0) {
         sampleRateMicros = 60 * pow(20,((float)noteNumber/127));
      }
      else {
         sampleRateMicros = 60;
      }
   break;
       
   }
}



int mainWaveformEngine(byte dataType, byte outsideMidiNoteNumber, 
   float outsidePitchInMicros, float outsideBendFactor, byte outsideCC) {

   static boolean insideRun = LOW;
   static byte insideMidiNoteNumber = 0;
   static unsigned long insidePitchInMicros = 0;
   static unsigned long insidePitchInMicrosAfterBendFactor = 0;
   static float insideBendFactor = 1.0;
   static byte insideCC1 = 0;
   static byte insideCC3 = 0;
   static byte insideCC5 = 0;
   static boolean insideHigh = LOW;
   static unsigned long insidePreviousMicros = 0;
   unsigned long currentMicros;
   static byte insidePreviousMidiNoteNumber;
   static boolean portamentoRunning;
   static boolean portamentoDirection;
   static float portamentoSpeed = 1.0;
   static float portamentoSpeedInMicros = 100.0 / (float)portamentoSpeed;
   static unsigned long previousPortamentoChange;
   static unsigned long insidePreviousPitchInMicros = 0;
   static unsigned long insideTargetPitchInMicros = 0;
   static boolean insidePitfall = LOW;
   static int insidePitfallPosition = 0;
   // static int insidePitfallWaveform = B0011101111100110;
   static int insidePitfallWaveform = 0x3BE6;
   static unsigned long insidePitchInMicros2 = 0;
   static byte heldNoteNumberArray[16];
   static unsigned long heldNoteNumberDurationMillis[16];
   static byte j = 0;
   static boolean blankSlotFound = LOW;
   static unsigned long newestNoteDuration = 0;
   static byte highestNoteNumber = 0;
   static byte newestNote = 0;
   static float portamentoSpeedConstant = 0.0018;
   unsigned long currentMillis;
   unsigned long elapsedTimeInMicros;
   
   //Lower the number means lower the pitch of the pitfall polypulse sound.
   static float pitfallTuningOffset = 0.87; 
   
   float portamentoStepInMicros;
              
   // Vibrato variables
   static unsigned long previousVibCountMicros = 0;
   static int vibCount = 0;
   static boolean vibDirection = 0; //0 counts up, 1 counts down
   static int vibAmount = 0;
   static float vibAmount2 = 0.0;
   static float vibFactor = 1.0;
   static int modWheelFactor = 0;
   static float finalFrequency = 0;
   unsigned long currentVibCountMicros;

   // Resolution of the sine vibrato.  (Calculates every x microseconds)
   static unsigned long sineVibSpeedStepsInMicros = 2000;

   // 0 is triangle vibrato.  1 is sine vibrato. 
   static byte vibWaveform = 1;

   // Reciprocal of Vib Speed for Triangle Vibrato 
   // (smaller number means faster)
   static unsigned long triangleVibSpeedStepsInMicros = 320; 
   
   static float vibRateDivisor = 23.0;
   
   static byte waveform1[32] = {255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,
      255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0};
   static byte waveform2[32] = {255,255,255,0,0,0,0,0,255,255,255,0,0,0,0,0,255,
      255,255,0,0,0,0,0,255,255,255,0,0,0,0,0};
   static byte waveform3[32] = {255,255,0,0,0,0,0,0,255,255,0,0,0,0,0,0,255,255,
      0,0,0,0,0,0,255,255,0,0,0,0,0,0};
   static byte waveform4[32] = {255,0,0,0,0,0,0,0,255,0,0,0,0,0,0,0,255,0,0,0,0,0,
      0,0,255,0,0,0,0,0,0,0};
   static byte waveform5[32] = {127,255,127,0,127,255,127,0,127,255,127,0,127,255,
      127,0,127,255,127,0,127,255,127,0,127,255,127,0,127,255,80,112};
   static byte waveform6[32] = {0,80,160,255,0,80,160,255,0,80,160,255,0,80,160,255,
      0,80,160,255,0,80,160,255,0,80,160,255,0,80,160,255};            
   static byte waveform7[32] = {127,191,255,191,127,63,0,63,127,191,255,191,127,63,0,
      63,127,191,255,191,127,63,0,63,127,191,255,191,127,63,0,63};
   static byte waveform8[32] = {255,255,255,0,255,255,255,255,0,255,0,255,0,0,255,0,
      255,255,255,0,255,255,255,255,0,255,0,255,0,0,255,0};
   static byte waveform9[32] = {255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,255,
      255,0,0,255,255,0,0,255,255,0,0,255,255,0,0};
   static byte waveform10[32] = {255,255,255,255,0,0,0,0,255,255,255,255,0,0,0,0,255,
      0,255,0,255,0,255,0,255,0,255,0,255,0,255,0};
   static byte waveform11[32] = {255,255,255,255,0,0,0,0,127,255,127,255,0,0,0,0,255,
      0,127,0,255,0,127,0,255,0,127,0,255,0,127,0};
   static byte waveform12[32] = {127,15,255,192,111,127,221,209,255,145,101,139,15,
      209,0,25,133,127,209,25,127,209,219,209,127,34,0,219,34,127,241,34};
   
   static byte sampleNumber = 1;
   static float sampleRateMicros;
   static byte sampleIncrementRate = 1;
   static unsigned long sampleCounter = 0;
   byte current8bitSampleLevel;


  switch(dataType){
                
      // Run Current Oscillator Settings
      case 1:  
         if (insideRun == HIGH) {
         
            // TRIANGLE VIBRATO - creating vibAmount
            if (vibWaveform == 0) {
               if (insideCC1 > 0) {
                  if (vibCount <= 0) { // Set direction of count
                     vibDirection = 0; 
                  }
                  if (vibCount >= 200) {
                     vibDirection = 1; 
                  }
                
                  currentVibCountMicros = micros();
              
                  if ((vibDirection == 0) && ((currentVibCountMicros - 
                     previousVibCountMicros) >= 
                     ((float)triangleVibSpeedStepsInMicros / 
                     (float)vibRateFactor))) {
                     
                     // If the proper amount of microseconds have passed 
                     // and we're counting up, count up one.
                     vibCount ++; 

                     // Set the current time for reference the next time.
                     previousVibCountMicros = micros(); 
                  }
              
                  if ((vibDirection == 1) && ((currentVibCountMicros - 
                     previousVibCountMicros) >= 
                     ((float)triangleVibSpeedStepsInMicros / 
                     (float)vibRateFactor))) {
                     
                     // If the proper amount of microseconds have 
                     // passed and we're counting down, count down one.
                     vibCount --; 
                     
                     // Set the current time for reference the next time.
                     previousVibCountMicros = micros(); 
                  }
              
                  vibAmount = map(vibCount, 0, 200, -100, 100);
                  
                  //Scales vibAmount to very small positive or negative amounts
                  vibAmount2 = (float)vibAmount * vibDepth; 

                  modWheelFactor = map(insideCC1, 0, 127, 0, 2000);
                  vibFactor = 1.0 + (vibAmount2 * 
                     ((float)modWheelFactor/1000));
                  
                  insidePitchInMicrosAfterBendFactor = 
                     calculateInsidePitchInMicrosAfterBendFactorCh2( 
                        insidePitchInMicros, insideBendFactor, 
                        vibFactor, insidePitfall, pitfallTuningOffset);
                  sampleRateMicros = 
                     (float)insidePitchInMicrosAfterBendFactor / 2.0;
              
               }
                
               else { // Squelch IEEE 754 math errors.
                  vibFactor = 1.0;
               }
               
            }
              
            // SINE VIBRATO - creating vibAmount
            if (vibWaveform == 1) {
               if (insideCC1 > 0) {
                  currentVibCountMicros = micros();

                  // Limits how often the chip can calculate the sine function.
                  if  ((currentVibCountMicros - previousVibCountMicros) >= 
                     sineVibSpeedStepsInMicros) { 
                  
                     currentMillis = millis();
                     
                     //range of  1 to -1, sclaed to time, factored to 100 to -100
                     vibAmount = sin(((float)currentMillis * 
                        (float)vibRateFactor)/(float)vibRateDivisor) * 100.0; 
   
                     //Scales vibAmount to very small positive or negative amounts
                     vibAmount2 = (float)vibAmount * vibDepth;
   
                     modWheelFactor = map(insideCC1, 0, 127, 0, 2000);
                     vibFactor = 1.0 + (vibAmount2 * 
                        ((float)modWheelFactor/1000));
                  
                     insidePitchInMicrosAfterBendFactor = 
                        calculateInsidePitchInMicrosAfterBendFactorCh2(
                           insidePitchInMicros, insideBendFactor, 
                           vibFactor, insidePitfall, pitfallTuningOffset);
                     sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
               
                     previousVibCountMicros = micros();
                  }
               }
                                                        
               else { // Squelch IEEE 754 math errors.
                  vibFactor = 1.0;
               }
            }
              
            // Oscillator guts
                  
            currentMicros = micros(); 
            // If it's time to decrease the pitch, do so, but scale it 
            // non-linearly so that the speed is always the same as if 
            // the shift is passing through 500 Hz.  If the pitch is 
            // higher than 500 Hz, slow the portamento down.  If the 
            // pitch is lower than 500 Hz, speed the portamento up.
            if ((portamentoRunning == HIGH) && (portamentoDirection == LOW) &&
               ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {

               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros + portamentoStepInMicros;
               previousPortamentoChange = micros();
               
               insidePitchInMicrosAfterBendFactor = 
                  calculateInsidePitchInMicrosAfterBendFactorCh2(
                  insidePitchInMicros, insideBendFactor, vibFactor, 
                  insidePitfall, pitfallTuningOffset);
               sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 
                  2.0;
         
               if (insidePitchInMicros >= insideTargetPitchInMicros) {
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
                 
               insidePitchInMicrosAfterBendFactor = 
                  calculateInsidePitchInMicrosAfterBendFactorCh2(
                  insidePitchInMicros, insideBendFactor, vibFactor, 
                  insidePitfall, pitfallTuningOffset);
               sampleRateMicros = 
                  (float)insidePitchInMicrosAfterBendFactor / 2.0;
               }
            }
            
            // If it's time to increase the pitch, do so, but scale 
            // it non-linearly so that the speed is always the same 
            // as if the shift is passing through 500 Hz.  If the 
            // pitch is higher than 500 Hz, slow the portamento down.  
            // If the pitch is lower than 500 Hz, speed the portamento up.
            if ((portamentoRunning == HIGH) && (portamentoDirection == HIGH) 
               && ((currentMicros - previousPortamentoChange) >= 
               portamentoSpeedInMicros)) {
               
               portamentoStepInMicros = (portamentoSpeedConstant / 
                  (1.0 / (float)insidePitchInMicros));
               if (portamentoStepInMicros < 1.0) {
                  portamentoStepInMicros = 1;
               }
               insidePitchInMicros = insidePitchInMicros - 
                  portamentoStepInMicros;
               previousPortamentoChange = micros();

               insidePitchInMicrosAfterBendFactor = 
                  calculateInsidePitchInMicrosAfterBendFactorCh2(
                  insidePitchInMicros, insideBendFactor, vibFactor, 
                  insidePitfall, pitfallTuningOffset);
               
               sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 
                  2.0;
                  
               if (insidePitchInMicros <= insideTargetPitchInMicros) {
                  portamentoRunning = LOW;
                  insidePitchInMicros = insideTargetPitchInMicros;
                       
                  insidePitchInMicrosAfterBendFactor = 
                     calculateInsidePitchInMicrosAfterBendFactorCh2(
                        insidePitchInMicros, insideBendFactor, 
                        vibFactor, insidePitfall, pitfallTuningOffset);                         
                  sampleRateMicros = 
                     (float)insidePitchInMicrosAfterBendFactor / 2.0;
              
               }
            }
                         

            currentMicros = micros();
            elapsedTimeInMicros = currentMicros - insidePreviousMicros;
            if (elapsedTimeInMicros >= (unsigned int)sampleRateMicros) {
               if (sampleCounter >= 32) {
                  sampleCounter = 0;
               }

               if (sampleNumber == 1) {
                  current8bitSampleLevel = waveform1[sampleCounter];
               }
   
               switch (sampleNumber) {
                  case 1: current8bitSampleLevel = waveform1[sampleCounter];
                  break;
                  case 2: current8bitSampleLevel = waveform2[sampleCounter];
                  break;
                  case 3: current8bitSampleLevel = waveform3[sampleCounter];
                  break;
                  case 4: current8bitSampleLevel = waveform4[sampleCounter];
                  break;
                  case 5: current8bitSampleLevel = waveform5[sampleCounter];
                  break;
                  case 6: current8bitSampleLevel = waveform6[sampleCounter];
                  break;
                  case 7: current8bitSampleLevel = waveform7[sampleCounter];
                  break;
                  case 8: current8bitSampleLevel = waveform8[sampleCounter];
                  break;
                  case 9: current8bitSampleLevel = waveform9[sampleCounter];
                  break;
                  case 10: current8bitSampleLevel = waveform10[sampleCounter];
                  break;
                  case 11: current8bitSampleLevel = waveform11[sampleCounter];
                  break;
                  case 12: current8bitSampleLevel = waveform12[sampleCounter];
                  break;
               }
               
               analogWrite(A14,current8bitSampleLevel);
                 
               sampleCounter = sampleCounter + sampleIncrementRate;
               insidePreviousMicros = micros();
            }
         }
      break;
      

      // Note On
      case 2: 
      
         if ((insideRun == LOW) && (outsideMidiNoteNumber > 0) && 
            (waveform_Arpeggiator(5,0) == LOW)) {
            
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
            
            if (isThisNoteInArray(heldNoteNumberArray,outsideMidiNoteNumber) ==
               LOW) {
            
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
         }
              
         if ((waveform_Arpeggiator(5,0) == HIGH) && 
            (outsideMidiNoteNumber > 0)) {
            
            portamentoRunning = LOW;
            insidePitchInMicros = outsidePitchInMicros;
            insidePreviousMidiNoteNumber = 0;
            insideRun = HIGH;
            insideMidiNoteNumber = outsideMidiNoteNumber;
         }
        
         if ((insideRun == HIGH) && (waveform_Arpeggiator(5,0) == 
            LOW) && (outsideMidiNoteNumber > 0)) {
          
            if (isThisNoteInArray(heldNoteNumberArray,
               outsideMidiNoteNumber) == LOW) {
            
               j = 0;
               blankSlotFound = LOW;
               while (blankSlotFound == LOW) {
                  if ((heldNoteNumberArray[j] != 0) && (j < 16)) {
                     j++;
                  }
                  else {
                     blankSlotFound = HIGH;
                  }
               }
               
               heldNoteNumberArray[j] = outsideMidiNoteNumber;
               heldNoteNumberDurationMillis[j] = millis();
            }
          
            j = 0;
            newestNoteDuration = 0;
            for (j = 0; j < 16; j++) {
               if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                  newestNote = heldNoteNumberArray[j];
               }
            }
            insidePreviousMidiNoteNumber = insideMidiNoteNumber;
            insideMidiNoteNumber = heldNoteNumberArray[j];
            insidePreviousPitchInMicros = insidePitchInMicros;
            insideTargetPitchInMicros = outsidePitchInMicros;
            portamentoRunning = HIGH;
            insideRun = HIGH;
         }
              
         if (portamentoRunning == HIGH) {
            if (insidePreviousPitchInMicros < insideTargetPitchInMicros) {
               //Going down in pitch.  insidePitchInMicros will grow.
               portamentoDirection = LOW; 
            }
            else {
               portamentoDirection = HIGH; //Going up in pitch.  insidePitchInMicros will shrink.
            }
         }
              
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
               insidePitchInMicros, insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
         waveform_Arpeggiator(9,0);
      break;
      

      // Note Off
      case 3:
         if (outsideMidiNoteNumber > 0) {
          
            // If the arpeggiator is turned off OR there are two notes 
            // held down by the arpeggiator.
            j = 0;
            highestNoteNumber = 0;
            for (j = 0; j < 16; j++) {
               if (heldNoteNumberArray[j] == outsideMidiNoteNumber) {
                  heldNoteNumberDurationMillis[j] = 0;
                  heldNoteNumberArray[j] = 0;
               }
               if (heldNoteNumberArray[j] > 0) {
               highestNoteNumber = heldNoteNumberArray[j];
               }  
            }
            if (highestNoteNumber == 0) {
               insideRun = LOW;
               digitalWriteFast(audioTwo, LOW);
               insidePreviousMidiNoteNumber = 0;
            }
            else {
               j = 0;
               newestNoteDuration = 0;
               for (j = 0; j < 16; j++) {
                  if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
                     newestNote = heldNoteNumberArray[j];
                  }
               }
               if ((waveform_Arpeggiator(5,0) == LOW) || 
                  ((waveform_Arpeggiator(5,0) == HIGH) && 
                  (waveform_Arpeggiator(7,0) == HIGH) && 
                  (waveform_Arpeggiator(8,0) == LOW))) {
      
                  OnNoteOn(6,newestNote,127);
               }
            }
          
            insidePitchInMicrosAfterBendFactor = 
               calculateInsidePitchInMicrosAfterBendFactorCh2(
               insidePitchInMicros, insideBendFactor, vibFactor, 0, 1);

            sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
            waveform_Arpeggiator(9,
               testArrayContentsForTwoNotesOrMore(heldNoteNumberArray));
         }
                   
      break;

      // Pitch Bend
      case 4: 
         insideBendFactor = outsideBendFactor;
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(insidePitchInMicros, 
            insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
      break;
      
      // CC 1 Change
      case 5: 
         insideCC1 = outsideCC;
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(insidePitchInMicros, 
            insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
                
      break;
      
      // CC 2 Change (Reserved for Bend Range)
      case 6:
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(insidePitchInMicros, 
            insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
      break;
      
      // CC 3 Change (vibrato type)
      case 7:
         insideCC3 = outsideCC;
         if (insideCC3 > 0) {
            vibWaveform = 1;
         }
         else {
            vibWaveform = 0;
         }
        
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(
            insidePitchInMicros, insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
      break;
      
      // CC 4 Change (Reserved for Arpeggiator On)
      case 8:
      break;
      
      // CC 6 Change (Sample Number)
      case 9:
         sampleNumber = map(outsideCC,0,127,1,12);
      break;
      
      // Returns newest note to Arpeggiator when it turns off.
      case 10:
         j = 0;
         newestNoteDuration = 0;
         for (j = 0; j < 16; j++) {
            if ((heldNoteNumberDurationMillis[j] > newestNoteDuration)) {
               newestNote = heldNoteNumberArray[j];
               newestNoteDuration = heldNoteNumberDurationMillis[j];
            }      
         }
        
         insidePitchInMicrosAfterBendFactor = 
            calculateInsidePitchInMicrosAfterBendFactorCh2(insidePitchInMicros, 
            insideBendFactor, vibFactor, 0, 1);
         sampleRateMicros = (float)insidePitchInMicrosAfterBendFactor / 2.0;
              
         return newestNote;
      break;
      
      case 11: //Returns insideDecay on other three oscillators
         return LOW;
      break;

      case 12:
         portamentoSpeedInMicros = map(outsideCC,0,127,20,2000);
      break;
   }
}





//////////////////////////////////////////
//  AUXILIARY FUNCTIONS
//////////////////////////////////////////


unsigned long calculateInsidePitchInMicrosAfterBendFactorCh2(unsigned long 
   insidePitchInMicros, float insideBendFactor, float vibFactor, 
   boolean insidePitfall, float pitfallTuningOffset) {

   float insidePitchInMicros2;
   unsigned long insidePitchInMicrosAfterBendFactor;

   if (insidePitfall == HIGH){
      insidePitchInMicros2 = (1.0 / ((2.0 / insidePitchInMicros) * 
         pitfallTuningOffset));
   }
   else {
      insidePitchInMicros2 = insidePitchInMicros;
   }
   insidePitchInMicrosAfterBendFactor = ((float)insidePitchInMicros2 * 
      (float)insideBendFactor * (float)vibFactor);
					
   return insidePitchInMicrosAfterBendFactor;
}




boolean testArrayContentsForNoNotes (byte noteNumberArray[16]) {
   byte testArrayContents1 = 0;
   byte testArrayContents2 = 0;
   byte i = 0;
   byte j = 0;
		
   while (i < 16) {
      if (noteNumberArray[i] > 0) {
         testArrayContents1 = noteNumberArray[i];
         j = i+1;
         while (j < 16) {
            if (noteNumberArray[j] > 0) {
               testArrayContents2 = noteNumberArray[j];
               break;
            }
            j++;
         }
         break;
      }
      i++;
   }
   if ((testArrayContents1 == 0) && (testArrayContents2 == 0)) {
      return HIGH;
   }
   else {
      return LOW;
   }
}




boolean testArrayContentsForTwoNotesOrMore (byte noteNumberArray[16]) {
   byte testArrayContents1 = 0;
   byte testArrayContents2 = 0;
   byte i = 0;
   byte j = 0;
		
   while (i < 16) {
      if (noteNumberArray[i] > 0) {
         testArrayContents1 = noteNumberArray[i];
         j = i+1;
         while (j < 16) {
            if (noteNumberArray[j] > 0) {
               testArrayContents2 = noteNumberArray[j];
               break;
            }
            j++;
         }
         break;
      }
      i++;
   }
   if ((testArrayContents1 > 0) && (testArrayContents2 > 0)) {
      return HIGH;
   }
   else {
      return LOW;
   }
}



boolean testArrayContentsForThreeNotesOrMore (byte noteNumberArray[16]) {
   byte testArrayContents1 = 0;
   byte testArrayContents2 = 0;
   byte testArrayContents3 = 0;
   byte i = 0;
   byte j = 0;
   byte k = 0;
		
   while (i < 16) {
      if (noteNumberArray[i] > 0) {
         testArrayContents1 = noteNumberArray[i];
         j = i+1;
         while (j < 16) {
            if (noteNumberArray[j] > 0) {
               testArrayContents2 = noteNumberArray[j];
               k = j+1;
               while (k < 16) {
                  if (noteNumberArray[k] > 0) {
                     testArrayContents3 = noteNumberArray[k];
                     break;
                  }
                  k++;
               }
               break;
            }
            j++;
         }
         break;
      }
      i++;
   }
   if ((testArrayContents1 != 0) && (testArrayContents2 != 0) && 
      (testArrayContents3 != 0)) {
      return HIGH;
   }
   else {
      return LOW;
   }
}



byte findSingleNoteInArray (byte noteNumberArray[16]) {
   byte arrayContents = 0;
   byte i = 0;
  
   while (i < 16) {
      if (noteNumberArray[i] > 0) {
         arrayContents = noteNumberArray[i];
         break;
      }
      i++;
   }
   return arrayContents;
}


boolean isThisNoteInArray (byte noteNumberArray[16], byte outsideNoteNumber) {
   boolean noteAlreadyThere = LOW;
   
   for (byte i = 0; i < 16; i++) {
      if (noteNumberArray[i] == outsideNoteNumber) {
         noteAlreadyThere = HIGH;
      }
   }
   return noteAlreadyThere;
}


void placeNoteInFirstEmptyArpArrayPosition(byte (&arpNoteNumberArray)[16], 
   byte arpOutsideNoteNumber) {

   boolean noteAlreadyStored = LOW;
	for (int arrayCounter = 0; arrayCounter < 16 ; arrayCounter++){
		if (arpNoteNumberArray[arrayCounter] == arpOutsideNoteNumber){
			noteAlreadyStored = HIGH;
			break;
		}
	}
	if (noteAlreadyStored == LOW){
		for (int arrayCounter = 0; arrayCounter < 16; arrayCounter++){
			if (arpNoteNumberArray[arrayCounter] == 0){
				arpNoteNumberArray[arrayCounter] = arpOutsideNoteNumber;
				break;
			}
		}
	}
}


void eraseThisNoteInArpArray(byte (&arpNoteNumberArray)[16], 
   byte arpOutsideNoteNumber, byte channel) {
  
   boolean decayOn;
   
   if ((testArrayContentsForThreeNotesOrMore(arpNoteNumberArray) == 
      LOW) && (testArrayContentsForTwoNotesOrMore(arpNoteNumberArray) == 
      HIGH)) {

      for (int arrayCounter = 0; arrayCounter < 16; arrayCounter++) {
         if (arpNoteNumberArray[arrayCounter] == arpOutsideNoteNumber) {
            arpNoteNumberArray[arrayCounter] = 0;
         }
      }
      if (channel == 1) {
         decayOn = ch1_Oscillator(11,0,0,0,0);
      }
      if (channel == 2) {
         decayOn = ch2_Oscillator(11,0,0,0,0);
      }
      if (channel == 3) {
         decayOn = ch3_Oscillator(11,0,0,0,0);
      }
      if (channel == 4) {
         decayOn = ch4_Oscillator(11,0,0,0,0);
      }
      if (channel == 6) {
         decayOn = mainWaveformEngine(11,0,0,0,0);
      }
      if (decayOn == LOW) {
         OnNoteOn(channel,findSingleNoteInArray(arpNoteNumberArray),127);
      }
   }
   else {
      for (int arrayCounter = 0; arrayCounter < 16; arrayCounter++) {
         if (arpNoteNumberArray[arrayCounter] == arpOutsideNoteNumber) {
            arpNoteNumberArray[arrayCounter] = 0;
         }
      }
   } 
}



byte lowestNoteInArpArray(byte (&arpNoteNumberArray)[16]) {
   byte transitionNote = 0;
    
   for (int arrayCounter = 0 ; arrayCounter < 16 ; arrayCounter++) {
      if (arpNoteNumberArray[arrayCounter] > transitionNote) {
         transitionNote = arpNoteNumberArray[arrayCounter];
      }
   }
   for (int arrayCounter = 0 ; arrayCounter < 16 ; arrayCounter++) {
      if ((arpNoteNumberArray[arrayCounter] < transitionNote) && 
         (arpNoteNumberArray[arrayCounter] > 0)) {
         
         transitionNote = arpNoteNumberArray[arrayCounter];
      }
   }

   return transitionNote;
}








//////////////////////////////////////////
//  ARPEGGIATOR FUNCTIONS
//////////////////////////////////////////


// Ch1 Arpeggiator
boolean ch1_Arpeggiator(byte dataType, byte outsideNoteNumber) {
   
   static byte noteNumberArray[16];
   static boolean arpeggiatorOn = LOW;
   static boolean arpeggiatorRunning = LOW;
   static byte arpeggiatorPatternType = 0;
   static byte insideNoteNumber;
   static byte playPosition;
   static byte lastPlayedPosition;
   static unsigned long insidePreviousMicros = 0;
   static unsigned long currentMicros;
   static unsigned long arpeggiatorInterval = 25000;
   static byte transitionNote;
   static boolean noteAlreadyStored;
   static boolean notesPlayedWhileArpOn = LOW;
                     
   // Oscillator variables
   float pitchInFrequency;
   float pitchInMicros;
   int noteNumberAfterOffset;

   switch (dataType) {
      case 1:
         // Run
         // Find the next note
         if ((arpeggiatorOn == HIGH) && (arpeggiatorRunning == HIGH)) {
            currentMicros = micros();
            if ((currentMicros - insidePreviousMicros) > arpeggiatorInterval) {
               while (noteNumberArray[playPosition] == 0) {
                  playPosition++;
                  if (playPosition >= 15) {
                     playPosition = 0;
                  }
					}
               if (noteNumberArray[playPosition] != 0) {
                  noteNumberAfterOffset = (noteNumberArray[playPosition] - 69);
  				      pitchInFrequency = (tuningPitch * pow(2,
                     ((float)noteNumberAfterOffset/12)));
  				      pitchInMicros = 500000.0 / pitchInFrequency;
                  ch1_Oscillator(2, noteNumberArray[playPosition], 
                     pitchInMicros, 0, 0);
			         lastPlayedPosition = playPosition;
                  if (playPosition < 15) {
                     playPosition++;
                  }
                  else {
                     playPosition = 0;
                  }
                  insidePreviousMicros = micros();
               }
            }
         }
      break;
      
      case 2:
         // Received Note On Command
         // Put the note in the first empty slot in the array
         if (arpeggiatorOn == HIGH) {
               notesPlayedWhileArpOn = HIGH;
             }
         placeNoteInFirstEmptyArpArrayPosition(noteNumberArray,
            outsideNoteNumber);
         arpeggiatorRunning = testArrayContentsForTwoNotesOrMore(
            noteNumberArray);
      break;
    
      case 3:
         // Received Note Off Command	
         eraseThisNoteInArpArray(noteNumberArray,outsideNoteNumber,1);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
         notesPlayedWhileArpOn = 
            !testArrayContentsForNoNotes(noteNumberArray);
      break;
  
      // Turn on/off arpeggiation
      case 4:
         if ((outsideNoteNumber > 0) && (arpeggiatorOn == LOW)) {
            arpeggiatorOn = HIGH;
            arpeggiatorRunning = 
               testArrayContentsForTwoNotesOrMore(noteNumberArray);
         }
         if (outsideNoteNumber == 0) {
         
            // If notes were played after the Arp was turned on, 
            // just trigger the lowest of them when the Arp gets turned off.
            if (notesPlayedWhileArpOn == HIGH) {
               transitionNote = lowestNoteInArpArray(noteNumberArray);
            }
            else if ((ch1_Oscillator(10,0,0,0,0) > 0) && 
               (arpeggiatorRunning == HIGH)) {
            transitionNote = ch1_Oscillator(10,0,0,0,0);
            }
            else {
               transitionNote = 0;
            }
      
            arpeggiatorOn = LOW;
            arpeggiatorRunning = LOW;
            notesPlayedWhileArpOn = LOW;
            if (transitionNote != 0) {
               OnNoteOn(1,transitionNote,127);
            }
         }
      break;
    
      case 5:
         return arpeggiatorOn;
      break;
    
      case 6:
         return testArrayContentsForNoNotes(noteNumberArray);
      break;
      
      case 7:
         return testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
      
      case 8:
         return testArrayContentsForThreeNotesOrMore(noteNumberArray);
      break;
          
      case 9:
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
   
      case 10:
        arpeggiatorInterval = map(outsideNoteNumber,0,127,20000,200000);
      break;
   }
}



// Ch2 Arpeggiator
boolean ch2_Arpeggiator(byte dataType, byte outsideNoteNumber) {
   
   static byte noteNumberArray[16];
   static boolean arpeggiatorOn = LOW;
   static boolean arpeggiatorRunning = LOW;
   static byte arpeggiatorPatternType = 0;
   static byte insideNoteNumber;
   static byte playPosition;
   static byte lastPlayedPosition;
   static unsigned long insidePreviousMicros = 0;
   static unsigned long currentMicros;
   static unsigned long arpeggiatorInterval = 25000;
   static byte transitionNote;
   static boolean noteAlreadyStored;
   static boolean notesPlayedWhileArpOn = LOW;
                  
   // Oscillator variables
   float pitchInFrequency;
   float pitchInMicros;
   int noteNumberAfterOffset;

   switch (dataType) { 
      case 1:
         // Run
         // Find the next note
         if ((arpeggiatorOn == HIGH) && (arpeggiatorRunning == HIGH)) {
            currentMicros = micros();
            if ((currentMicros - insidePreviousMicros) > arpeggiatorInterval) {
               while (noteNumberArray[playPosition] == 0) {
                  playPosition++;
                  if (playPosition >= 15) {
                     playPosition = 0;
                  }
					}
               if (noteNumberArray[playPosition] != 0) {
                  noteNumberAfterOffset = (noteNumberArray[playPosition] - 69);
                  pitchInFrequency = (tuningPitch * 
                     pow(2,((float)noteNumberAfterOffset/12)));
                  pitchInMicros = 500000.0 / pitchInFrequency;
                  ch2_Oscillator(2, noteNumberArray[playPosition], 
                     pitchInMicros, 0, 0);
                  lastPlayedPosition = playPosition;
                  if (playPosition < 15) {
                     playPosition++;
                  }
                  else {
                     playPosition = 0;
                  }
                  insidePreviousMicros = micros();
               }
			   }
         }
      break;
    
      case 2:
         // Received Note-On
         if (arpeggiatorOn == HIGH) {
            notesPlayedWhileArpOn = HIGH;
         }
         placeNoteInFirstEmptyArpArrayPosition(noteNumberArray,
            outsideNoteNumber);
         arpeggiatorRunning = testArrayContentsForTwoNotesOrMore(
            noteNumberArray);
      break;
    
      case 3:
         // Received Note Off Command	
         eraseThisNoteInArpArray(noteNumberArray,outsideNoteNumber,2);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
         notesPlayedWhileArpOn = !testArrayContentsForNoNotes(noteNumberArray);
      break;
  
      // Turn on/off arpeggiation
      case 4:
         if ((outsideNoteNumber > 0) && (arpeggiatorOn == LOW)) {
            arpeggiatorOn = HIGH;
            arpeggiatorRunning = 
               testArrayContentsForTwoNotesOrMore(noteNumberArray);
         }
         if (outsideNoteNumber == 0) {
         // If notes were played after the Arp was turned on, 
         // just trigger the lowest of them when the Arp gets turned off.
            if (notesPlayedWhileArpOn == HIGH) {
               transitionNote = lowestNoteInArpArray(noteNumberArray);
            }
            else if ((ch2_Oscillator(10,0,0,0,0) > 0) && 
               (arpeggiatorRunning == HIGH)) {
            transitionNote = ch2_Oscillator(10,0,0,0,0);
            }
            else {
               transitionNote = 0;
            }
      
            arpeggiatorOn = LOW;
            arpeggiatorRunning = LOW;
            notesPlayedWhileArpOn = LOW;
            if (transitionNote != 0) {
               OnNoteOn(2,transitionNote,127);
            }
         }
      break;
    
      case 5:
         return arpeggiatorOn;
      break;
      
      case 6:
         return testArrayContentsForNoNotes(noteNumberArray);
      break;
      
      case 7:
         return testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
      
      case 8:
         return testArrayContentsForThreeNotesOrMore(noteNumberArray);
      break;
      
      case 9:
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;

      case 10:
         arpeggiatorInterval = map(outsideNoteNumber,0,127,20000,200000);
      break;
        
   }
}


// Ch3 Arpeggiator
boolean ch3_Arpeggiator(byte dataType, byte outsideNoteNumber) {

   // Initialization
   static byte noteNumberArray[16];
   static boolean arpeggiatorOn = LOW;
   static boolean arpeggiatorRunning = LOW;
   static byte arpeggiatorPatternType = 0;
   static byte insideNoteNumber;
   static byte playPosition;
   static byte lastPlayedPosition;
   static unsigned long insidePreviousMicros = 0;
   static unsigned long currentMicros;
   static unsigned long arpeggiatorInterval = 25000;
   static byte transitionNote;
   static boolean noteAlreadyStored;
   static boolean notesPlayedWhileArpOn = LOW;
                  
   // Oscillator variables
   float pitchInFrequency;
   float pitchInMicros;
   int noteNumberAfterOffset;

   switch (dataType) {
      case 1:
         // Run
         // Find the next note
         if ((arpeggiatorOn == HIGH) && (arpeggiatorRunning == HIGH)) {
            currentMicros = micros();
            if ((currentMicros - insidePreviousMicros) > arpeggiatorInterval) {
               while (noteNumberArray[playPosition] == 0) {
                  playPosition++;
                  if (playPosition >= 15) {
                     playPosition = 0;
                  }
					}
               if (noteNumberArray[playPosition] != 0) {
                  noteNumberAfterOffset = (noteNumberArray[playPosition] - 69);
  	               pitchInFrequency = (tuningPitch * pow(2,
                     ((float)noteNumberAfterOffset/12)));
  	               pitchInMicros = 500000.0 / pitchInFrequency;
                  ch3_Oscillator(2, noteNumberArray[playPosition], 
                     pitchInMicros, 0, 0);
                  lastPlayedPosition = playPosition;
                  if (playPosition < 15) {
                     playPosition++;
                  }
                  else {
                     playPosition = 0;
                  }
                  insidePreviousMicros = micros();
               }
            }
         }
      break;
      
      case 2:
         // Received Note On Command
         // Put the note in the first empty slot in the array
         if (arpeggiatorOn == HIGH) {
            notesPlayedWhileArpOn = HIGH;
         }
         placeNoteInFirstEmptyArpArrayPosition(
            noteNumberArray,outsideNoteNumber);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
    
      case 3:
         // Received Note Off Command	
         eraseThisNoteInArpArray(noteNumberArray,outsideNoteNumber,3);
         arpeggiatorRunning = testArrayContentsForTwoNotesOrMore(noteNumberArray);
         notesPlayedWhileArpOn = !testArrayContentsForNoNotes(noteNumberArray);
      break;
  
      // Turn on/off arpeggiation
      case 4:
         if ((outsideNoteNumber > 0) && (arpeggiatorOn == LOW)) {
            arpeggiatorOn = HIGH;
            arpeggiatorRunning = 
               testArrayContentsForTwoNotesOrMore(noteNumberArray);
         }
         if (outsideNoteNumber == 0) {
        
         // If notes were played after the Arp was turned on, 
         // just trigger the lowest of them when the Arp gets turned off.
            if (notesPlayedWhileArpOn == HIGH) {
               transitionNote = lowestNoteInArpArray(noteNumberArray);
            }
            else if ((ch3_Oscillator(10,0,0,0,0) > 0) && 
               (arpeggiatorRunning == HIGH)) {
               transitionNote = ch3_Oscillator(10,0,0,0,0);
            }
            else {
               transitionNote = 0;
            }
         
            arpeggiatorOn = LOW;
            arpeggiatorRunning = LOW;
            notesPlayedWhileArpOn = LOW;
            if (transitionNote != 0) {
               OnNoteOn(3,transitionNote,127);
            }
         }
      break;
    
      case 5:
         return arpeggiatorOn;
      break;
      
      case 6:
         return testArrayContentsForNoNotes(noteNumberArray);
      break;
      
      case 7:
         return testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
      
      case 8:
         return testArrayContentsForThreeNotesOrMore(noteNumberArray);
      break;
      
      case 9:
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;      
      
      case 10:
         arpeggiatorInterval = map(outsideNoteNumber,0,127,20000,200000);
      break;
   }
}



// Ch4 Arpeggiator
boolean ch4_Arpeggiator(byte dataType, byte outsideNoteNumber) {

   static byte noteNumberArray[16];
   static boolean arpeggiatorOn = LOW;
   static boolean arpeggiatorRunning = LOW;
   static byte arpeggiatorPatternType = 0;
   static byte insideNoteNumber;
   static byte playPosition;
   static byte lastPlayedPosition;
   static unsigned long insidePreviousMicros = 0;
   static unsigned long currentMicros;
   static unsigned long arpeggiatorInterval = 25000;
   static byte transitionNote;
   static boolean noteAlreadyStored;
   static boolean notesPlayedWhileArpOn = LOW;
                  
   // Oscillator variables
   float pitchInFrequency;
   float pitchInMicros;
   int noteNumberAfterOffset;

   switch (dataType) {
    
      case 1:
         // Run
         // Find the next note
         if ((arpeggiatorOn == HIGH) && (arpeggiatorRunning == HIGH)) {
            currentMicros = micros();
            if ((currentMicros - insidePreviousMicros) > arpeggiatorInterval) {
               while (noteNumberArray[playPosition] == 0) {
                  playPosition++;
                  if (playPosition >= 15) {
                     playPosition = 0;
                  }
         		}
               if (noteNumberArray[playPosition] != 0) {
                  noteNumberAfterOffset = (noteNumberArray[playPosition] - 69);
                  pitchInFrequency = (tuningPitch * 
                     pow(2,((float)noteNumberAfterOffset/12)));
                  pitchInMicros = 500000.0 / pitchInFrequency;
                  ch4_Oscillator(2, noteNumberArray[playPosition], 
                     pitchInMicros, 0, 0);
                  lastPlayedPosition = playPosition;
                  if (playPosition < 15) {
                     playPosition++;
                  }
                  else {
                     playPosition = 0;
                  }
                  insidePreviousMicros = micros();
               }
         	}
         }
      break;
    
      case 2:
         // Received Note On Command
         // Put the note in the first empty slot in the array
         if (arpeggiatorOn == HIGH) {
            notesPlayedWhileArpOn = HIGH;
         }
         placeNoteInFirstEmptyArpArrayPosition(
            noteNumberArray,outsideNoteNumber);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
    
      case 3:
         // Received Note Off Command	
         eraseThisNoteInArpArray(noteNumberArray,outsideNoteNumber,4);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
         notesPlayedWhileArpOn = !testArrayContentsForNoNotes(noteNumberArray);
      break;
  
      // Turn on/off arpeggiation
      case 4:
         if ((outsideNoteNumber > 0) && (arpeggiatorOn == LOW)) {
            arpeggiatorOn = HIGH;
            arpeggiatorRunning = testArrayContentsForTwoNotesOrMore(noteNumberArray);
         }
         if (outsideNoteNumber == 0) {
            // If notes were played after the Arp was turned on, just trigger 
            // the lowest of them when the Arp gets turned off.
            if (notesPlayedWhileArpOn == HIGH) {
               transitionNote = lowestNoteInArpArray(noteNumberArray);
            }
            else if ((ch4_Oscillator(10,0,0,0,0) > 0) && 
               (arpeggiatorRunning == HIGH)) {
               transitionNote = ch4_Oscillator(10,0,0,0,0);
            }
            else {
               transitionNote = 0;
            }
      
            arpeggiatorOn = LOW;
            arpeggiatorRunning = LOW;
            notesPlayedWhileArpOn = LOW;
            if (transitionNote != 0) {
               OnNoteOn(4,transitionNote,127);
            }
         }
      break;
    
      case 5:
         return arpeggiatorOn;
      break;
      
      case 6:
         return testArrayContentsForNoNotes(noteNumberArray);
      break;
      
      case 7:
         return testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
      
      case 8:
         return testArrayContentsForThreeNotesOrMore(noteNumberArray);
      break;
      
      case 9:
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;

      case 10:
         arpeggiatorInterval = map(outsideNoteNumber,0,127,20000,200000);
      break;
   }
}



boolean waveform_Arpeggiator(byte dataType, byte outsideNoteNumber) {
   
   static byte noteNumberArray[16];
   static boolean arpeggiatorOn = LOW;
   static boolean arpeggiatorRunning = LOW;
   static byte arpeggiatorPatternType = 0;
   static byte insideNoteNumber;
   static byte playPosition;
   static byte lastPlayedPosition;
   static unsigned long insidePreviousMicros = 0;
   static unsigned long currentMicros;
   static unsigned long arpeggiatorInterval = 25000;
   static byte transitionNote;
   static boolean noteAlreadyStored;
   static boolean notesPlayedWhileArpOn = LOW;
                    
   // Oscillator variables
   float pitchInFrequency;
   float pitchInMicros;
   int noteNumberAfterOffset;

   switch (dataType) {
      case 1:
         // Run
         // Find the next note
         if ((arpeggiatorOn == HIGH) && (arpeggiatorRunning == HIGH)) {
            currentMicros = micros();
            if ((currentMicros - insidePreviousMicros) > arpeggiatorInterval) {
               while (noteNumberArray[playPosition] == 0) {
                  playPosition++;
                  if (playPosition >= 15) {
                     playPosition = 0;
                  }
               }
               if (noteNumberArray[playPosition] != 0) {
                  noteNumberAfterOffset = (noteNumberArray[playPosition] - 69);
                  pitchInFrequency = (tuningPitch * 
                     pow(2,((float)noteNumberAfterOffset/12)));
                  pitchInMicros = 500000.0 / pitchInFrequency;
                  mainWaveformEngine(2, noteNumberArray[playPosition], 
                     pitchInMicros, 0, 0);
                  lastPlayedPosition = playPosition;
                  if (playPosition < 15) {
                     playPosition++;
                  }
                  else {
                     playPosition = 0;
                  }
                  insidePreviousMicros = micros();
               }
            }
         }
      break;

      case 2:
         // Received Note On Command
         // Put the note in the first empty slot in the array
         if (arpeggiatorOn == HIGH) {
            notesPlayedWhileArpOn = HIGH;
         }
         placeNoteInFirstEmptyArpArrayPosition(
            noteNumberArray,outsideNoteNumber);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
    
      case 3:
         // Received Note Off Command 
         eraseThisNoteInArpArray(noteNumberArray,outsideNoteNumber,6);
         arpeggiatorRunning = 
            testArrayContentsForTwoNotesOrMore(noteNumberArray);
         notesPlayedWhileArpOn = 
            !testArrayContentsForNoNotes(noteNumberArray);
      break;
  
      // Turn on/off arpeggiation
      case 4:
         if ((outsideNoteNumber > 0) && (arpeggiatorOn == LOW)) {
            arpeggiatorOn = HIGH;
            arpeggiatorRunning = 
               testArrayContentsForTwoNotesOrMore(noteNumberArray);
         }
         if (outsideNoteNumber == 0) {
            // If notes were played after the Arp was turned on, 
            // just trigger the lowest of them when the Arp gets turned off.
            if (notesPlayedWhileArpOn == HIGH) {
               transitionNote = lowestNoteInArpArray(noteNumberArray);
            }
            else if ((mainWaveformEngine(10,0,0,0,0) > 0) && 
               (arpeggiatorRunning == HIGH)) {
               
               transitionNote = mainWaveformEngine(10,0,0,0,0);
            }
            else {
               transitionNote = 0;
            }
      
            arpeggiatorOn = LOW;
            arpeggiatorRunning = LOW;
            notesPlayedWhileArpOn = LOW;
            if (transitionNote != 0) {
               OnNoteOn(6,transitionNote,127);
            }
         }
      break;
    
      case 5:
         return arpeggiatorOn;
      break;
      
      case 6:
         return testArrayContentsForNoNotes(noteNumberArray);
      break;
      
      case 7:
         return testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;
      
      case 8:
         return testArrayContentsForThreeNotesOrMore(noteNumberArray);
      break;
      
      case 9:
         arpeggiatorRunning = testArrayContentsForTwoNotesOrMore(noteNumberArray);
      break;

      case 10:
         arpeggiatorInterval = map(outsideNoteNumber,0,127,20000,200000);
      break;
        
   }
}




//////////////////////////////////////////
//  END
//////////////////////////////////////////
